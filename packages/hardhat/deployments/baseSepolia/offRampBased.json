{
  "address": "0x32Cd6c5831531F96f57d1faf4DDdf0222c4Af8AB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ConfirmationAddressMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "UnexpectedRequestID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "ans",
          "type": "string"
        }
      ],
      "name": "CHAR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "EthClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "character",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "Response",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "id",
          "type": "uint64"
        }
      ],
      "name": "attestationEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        }
      ],
      "name": "Read",
      "outputs": [
        {
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buyerCryptoLock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sellerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sellerCryptoLock",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "trxMoney",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "inrAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethLock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "INR_Paid_to_Seller",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "lastRequestId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "agreed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "buyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "characters",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sellerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "confirmOffRamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMerchant",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSeller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastError",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schemaId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "seller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "string[]",
          "name": "args",
          "type": "string[]"
        }
      ],
      "name": "sendRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "schemaId_",
          "type": "uint64"
        }
      ],
      "name": "setSchemaID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spInstance",
      "outputs": [
        {
          "internalType": "contract ISP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        }
      ],
      "name": "startRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradeETH",
          "type": "uint256"
        }
      ],
      "name": "submitProposalOffRAMP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trades",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cryptoLock",
              "type": "uint256"
            }
          ],
          "internalType": "struct offRampBased.Merchant",
          "name": "buyer",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cryptoLock",
              "type": "uint256"
            }
          ],
          "internalType": "struct offRampBased.Merchant",
          "name": "seller",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "Trx_Money",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "InrAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "EthLock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "INR_Paid_to_Seller",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "s_lastRequestId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "agreed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c9280109c2ea20f5ba51093d69c698535474b628aa355651d0f37a96243528a",
  "receipt": {
    "to": null,
    "from": "0x2D62332066e2735DEbEaf71AFE343236C9Ee7a1e",
    "contractAddress": "0x32Cd6c5831531F96f57d1faf4DDdf0222c4Af8AB",
    "transactionIndex": 16,
    "gasUsed": "2621382",
    "logsBloom": "0x
    "blockHash": "0x3b13d990ca5304e900fe307d2c28136a4af8166ffe0ff38269251195b1564127",
    "transactionHash": "0x9c9280109c2ea20f5ba51093d69c698535474b628aa355651d0f37a96243528a",
    "logs": [],
    "blockNumber": 16453506,
    "cumulativeGasUsed": "7234336",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "22883e1c1c38f8b23d5bf26d727e02fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ConfirmationAddressMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"UnexpectedRequestID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ans\",\"type\":\"string\"}],\"name\":\"CHAR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"EthClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"character\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"Response\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"attestationEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"}],\"name\":\"Read\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyerCryptoLock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerCryptoLock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"trxMoney\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inrAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"INR_Paid_to_Seller\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"lastRequestId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"agreed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"buyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"characters\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"confirmOffRamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMerchant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schemaId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"seller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"schemaId_\",\"type\":\"uint64\"}],\"name\":\"setSchemaID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spInstance\",\"outputs\":[{\"internalType\":\"contract ISP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"}],\"name\":\"startRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeETH\",\"type\":\"uint256\"}],\"name\":\"submitProposalOffRAMP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trades\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cryptoLock\",\"type\":\"uint256\"}],\"internalType\":\"struct offRampBased.Merchant\",\"name\":\"buyer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cryptoLock\",\"type\":\"uint256\"}],\"internalType\":\"struct offRampBased.Merchant\",\"name\":\"seller\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"Trx_Money\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"InrAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EthLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"INR_Paid_to_Seller\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"s_lastRequestId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"agreed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/offRampBased.sol\":\"offRampBased\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n}\\n\",\"keccak256\":\"0x0ebc4375ecd10d2d747dc00520b8e51f9f13bbfe894097d2bd470527345d6a5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IVersionable } from \\\"./IVersionable.sol\\\";\\nimport { Schema } from \\\"../models/Schema.sol\\\";\\nimport { Attestation, OffchainAttestation } from \\\"../models/Attestation.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Sign Protocol Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISP is IVersionable {\\n    event SchemaRegistered(uint64 schemaId);\\n    event AttestationMade(uint64 attestationId, string indexingKey);\\n    event AttestationRevoked(uint64 attestationId, string reason);\\n    event OffchainAttestationMade(string attestationId);\\n    event OffchainAttestationRevoked(string attestationId, string reason);\\n\\n    /**\\n     * @dev 0x9e87fac8\\n     */\\n    error Paused();\\n    /**\\n     * @dev 0x38f8c6c4\\n     */\\n    error SchemaNonexistent();\\n    /**\\n     * @dev 0x71984561\\n     */\\n    error SchemaWrongRegistrant();\\n    /**\\n     * @dev 0x8ac42f49\\n     */\\n    error AttestationIrrevocable();\\n    /**\\n     * @dev 0x54681a13\\n     */\\n    error AttestationNonexistent();\\n    /**\\n     * @dev 0xa65e02ed\\n     */\\n    error AttestationInvalidDuration();\\n    /**\\n     * @dev 0xd8c3da86\\n     */\\n    error AttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xa9ad2007\\n     */\\n    error AttestationWrongAttester();\\n    /**\\n     * @dev 0xc83e3cdf\\n     */\\n    error OffchainAttestationExists();\\n    /**\\n     * @dev 0xa006519a\\n     */\\n    error OffchainAttestationNonexistent();\\n    /**\\n     * @dev 0xa0671d20\\n     */\\n    error OffchainAttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xfdf4e6f9\\n     */\\n    error InvalidDelegateSignature();\\n    /**\\n     * @dev 0x5c34b9cc\\n     */\\n    error LegacySPRequired();\\n\\n    /**\\n     * @notice Registers a Schema.\\n     * @dev Emits `SchemaRegistered`.\\n     * @param schema See `Schema`.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @return schemaId The assigned ID of the registered schema.\\n     */\\n    function register(Schema memory schema, bytes calldata delegateSignature) external returns (uint64 schemaId);\\n\\n    /**\\n     * @notice Makes an attestation.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ETH payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        uint256 resolverFeesETH,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Timestamps an off-chain data ID.\\n     * @dev Emits `OffchainAttestationMade`.\\n     * @param offchainAttestationId The off-chain data ID.\\n     * @param delegateAttester An optional delegated attester that authorized the caller to attest on their behalf if\\n     * this is a delegated attestation. Use `address(0)` otherwise.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise. Use `\\\"\\\"` or `0x` otherwise.\\n     */\\n    function attestOffchain(\\n        string calldata offchainAttestationId,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        uint256 resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing offchain attestation.\\n     * @dev Emits `OffchainAttestationRevoked`. Must be called by the attester.\\n     * @param offchainAttestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     */\\n    function revokeOffchain(\\n        string calldata offchainAttestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch registers a Schema.\\n     */\\n    function registerBatch(\\n        Schema[] calldata schemas,\\n        bytes calldata delegateSignature\\n    )\\n        external\\n        returns (uint64[] calldata schemaIds);\\n\\n    /**\\n     * @notice Batch attests.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ETH payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata resolverFeesETH,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ERC20 payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch timestamps off-chain data IDs.\\n     */\\n    function attestOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ETH payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        uint256[] calldata resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes off-chain attestations.\\n     */\\n    function revokeOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Returns the specified `Schema`.\\n     */\\n    function getSchema(uint64 schemaId) external view returns (Schema calldata);\\n\\n    /**\\n     * @notice Returns the specified `Attestation`.\\n     */\\n    function getAttestation(uint64 attestationId) external view returns (Attestation calldata);\\n\\n    /**\\n     * @notice Returns the specified `OffchainAttestation`.\\n     */\\n    function getOffchainAttestation(string calldata offchainAttestationId)\\n        external\\n        view\\n        returns (OffchainAttestation calldata);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated registration.\\n     */\\n    function getDelegatedRegisterHash(Schema memory schema) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch registration.\\n     */\\n    function getDelegatedRegisterBatchHash(Schema[] memory schemas) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated attestation.\\n     */\\n    function getDelegatedAttestHash(Attestation calldata attestation) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch attestation.\\n     */\\n    function getDelegatedAttestBatchHash(Attestation[] calldata attestations) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestHash(string calldata offchainAttestationId) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestBatchHash(string[] calldata offchainAttestationIds)\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated revocation.\\n     */\\n    function getDelegatedRevokeHash(uint64 attestationId, string memory reason) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch revocation.\\n     */\\n    function getDelegatedRevokeBatchHash(\\n        uint64[] memory attestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeHash(\\n        string memory offchainAttestationId,\\n        string memory reason\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeBatchHash(\\n        string[] memory offchainAttestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the current schema counter. This is incremented for each `Schema` registered.\\n     */\\n    function schemaCounter() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the current on-chain attestation counter. This is incremented for each `Attestation` made.\\n     */\\n    function attestationCounter() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd5ddbb7cc6af2ee4c11d6c5dac739fc6254d84e13167bc054eb4477244490756\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SIGN Attestation Protocol Resolver Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISPHook {\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xa42159d34c4b8fa91507efacad81c14106f466efdc63b81a7d566dc0d2e736f4\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IVersionable\\n * @author Jack Xu @ EthSign\\n * @dev This interface helps contracts to keep track of their versioning for upgrade compatibility checks.\\n */\\ninterface IVersionable {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xbcf1955aa8423f4f77a46a988a7cd41a46ae92af42aa4546cfebdc2a92916129\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Attestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain attestation record. This record is not deleted after revocation.\\n *\\n * `schemaId`: The `Schema` that this Attestation is based on. It must exist.\\n * `linkedAttestationId`: Useful if the current Attestation references a previous Attestation. It can either be 0 or an\\n * existing attestation ID.\\n * `attestTimestamp`: When the attestation was made. This is automatically populated by `_attest(...)`.\\n * `revokeTimestamp`: When the attestation was revoked. This is automatically populated by `_revoke(...)`.\\n * `attester`: The attester. At this time, the attester must be the caller of `attest()`.\\n * `validUntil`: The expiration timestamp of the Attestation. Must respect `Schema.maxValidFor`. 0 indicates no\\n * expiration date.\\n * `dataLocation`: Where `Attestation.data` is stored. See `DataLocation.DataLocation`.\\n * `revoked`: If the Attestation has been revoked. It is possible to make a revoked Attestation.\\n * `recipients`: The intended ABI-encoded recipients of this Attestation. This is of type `bytes` to support non-EVM\\n * repicients.\\n * `data`: The raw data of the Attestation based on `Schema.schema`. There is no enforcement here, however. Recommended\\n * to use `abi.encode`.\\n */\\nstruct Attestation {\\n    uint64 schemaId;\\n    uint64 linkedAttestationId;\\n    uint64 attestTimestamp;\\n    uint64 revokeTimestamp;\\n    address attester;\\n    uint64 validUntil;\\n    DataLocation dataLocation;\\n    bool revoked;\\n    bytes[] recipients;\\n    bytes data;\\n}\\n\\n/**\\n * @title OffchainAttestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an off-chain attestation record. This record is not deleted after revocation.\\n *\\n * `attester`: The attester. At this time, the attester must be the caller of `attestOffchain()`.\\n * `timestamp`: The `block.timestamp` of the function call.\\n */\\nstruct OffchainAttestation {\\n    address attester;\\n    uint64 timestamp;\\n}\\n\",\"keccak256\":\"0x8e2a182141d06bfdcce1325d70e8dd307f7d6b3d7b6fafcedc2dbabeb99fa30f\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title DataLocation\\n * @author Jack Xu @ EthSign\\n * @notice This enum indicates where `Schema.data` and `Attestation.data` are stored.\\n */\\nenum DataLocation {\\n    ONCHAIN,\\n    ARWEAVE,\\n    IPFS,\\n    CUSTOM\\n}\\n\",\"keccak256\":\"0x14f64929317cae8ae822a0dd2c20315ac141f10fa255cd2b13a0a4962385ec10\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Schema.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ISPHook } from \\\"../interfaces/ISPHook.sol\\\";\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Schema\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain Schema that Attestations can conform to.\\n *\\n * `registrant`: The address that registered this schema.\\n * `revocable`: Whether Attestations that adopt this Schema can be revoked.\\n * `dataLocation`: Where `Schema.data` is stored. See `DataLocation.DataLocation`.\\n * `maxValidFor`: The maximum number of seconds that an Attestation can remain valid. 0 means Attestations can be valid\\n * forever. This is enforced through `Attestation.validUntil`.\\n * `hook`: The `ISPHook` that is called at the end of every function. 0 means there is no hook set. See\\n * `ISPHook`.\\n * `timestamp`: When the schema was registered. This is automatically populated by `_register(...)`.\\n * `data`: The raw schema that `Attestation.data` should follow. Since there is no way to enforce this, it is a `string`\\n * for easy readability.\\n */\\nstruct Schema {\\n    address registrant;\\n    bool revocable;\\n    DataLocation dataLocation;\\n    uint64 maxValidFor;\\n    ISPHook hook;\\n    uint64 timestamp;\\n    string data;\\n}\\n\",\"keccak256\":\"0xcf3bd964790fdc7f72bacc86380b307e58bf15fa5f7332852d4969fe0db58216\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/offRampBased.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { FunctionsClient } from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\\\";\\nimport { ConfirmedOwner } from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport { FunctionsRequest } from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\\\";\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ISP } from \\\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\\\";\\nimport { Attestation } from \\\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\\\";\\nimport { DataLocation } from \\\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\\\";\\n\\ncontract offRampBased is FunctionsClient, ConfirmedOwner {\\n\\tusing FunctionsRequest for FunctionsRequest.Request;\\n\\n\\t//ISP public spInstance; //0x4e4af2a21ebf62850fD99Eb6253E1eFBb56098cD\\n\\tISP public spInstance = ISP(0x4e4af2a21ebf62850fD99Eb6253E1eFBb56098cD);\\n\\tuint64 public schemaId;\\n\\n\\t// State variables to store the last request ID, response, and error\\n\\tbytes32 public s_lastRequestId;\\n\\tbytes public s_lastResponse;\\n\\tbytes public s_lastError;\\n\\tstring public characters;\\n\\n\\t// Unique identifier for the Chainlink DON\\n\\tbytes32 private constant donID =\\n\\t\\t0x66756e2d617262697472756d2d7365706f6c69612d3100000000000000000000;\\n\\t// Price feed address for ETH/USD\\n\\taddress private constant priceFeedAddress =\\n\\t\\t0xd30e2101a97dcbAeBCBC04F14C3f624E67A35165;\\n\\t// Router address for Sepolia\\n\\taddress private constant router =\\n\\t\\t0x234a5fb5Bd614a7AA2FfAB244D603abFA0Ac5C5C;\\n\\n\\t// Callback gas limit\\n\\tuint32 private constant gasLimit = 300000;\\n\\n\\terror ConfirmationAddressMismatch();\\n\\terror UnexpectedRequestID(bytes32 requestId);\\n\\n\\t// Mappings to store trade details and role-based access\\n\\tmapping(uint256 => Trade) public trades;\\n\\tmapping(address => bool) public isMerchant;\\n\\tmapping(address => bool) public isSeller;\\n\\tmapping(bytes32 => uint256) private requestIdToTradeId;\\n\\n\\t// Structures to store trade-related data\\n\\tstruct Merchant {\\n\\t\\taddress addr;\\n\\t\\tuint256 cryptoLock;\\n\\t}\\n\\n\\tstruct Trade {\\n\\t\\tMerchant buyer;\\n\\t\\tMerchant seller;\\n\\t\\tstring Trx_Money;\\n\\t\\tuint256 InrAmount;\\n\\t\\tuint256 EthLock;\\n\\t\\tuint256 INR_Paid_to_Seller;\\n\\t\\tbytes32 s_lastRequestId;\\n\\t\\tbool agreed;\\n\\t}\\n\\n\\t// Events to log actions\\n\\tevent CHAR(string ans);\\n\\tevent attestationEvent(uint64 id);\\n\\tevent Response(\\n\\t\\tbytes32 indexed requestId,\\n\\t\\tstring character,\\n\\t\\tbytes response,\\n\\t\\tbytes err\\n\\t);\\n\\tevent EthClaimed(\\n\\t\\taddress indexed seller,\\n\\t\\taddress indexed buyer,\\n\\t\\tuint256 tradeId,\\n\\t\\tuint256 amountClaimed\\n\\t);\\n\\tconstructor() FunctionsClient(router) ConfirmedOwner(msg.sender) {}\\n\\tfunction setSchemaID(uint64 schemaId_) external onlyOwner {\\n\\t\\tschemaId = schemaId_;\\n\\t}\\n\\n\\tmodifier onlyParticipant(uint256 tradeId) {\\n\\t\\trequire(\\n\\t\\t\\ttrades[tradeId].buyer.addr == msg.sender ||\\n\\t\\t\\t\\ttrades[tradeId].seller.addr == msg.sender,\\n\\t\\t\\t\\\"Not authorized or trade not agreed\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier OnlySeller(uint256 tradeId) {\\n\\t\\trequire(\\n\\t\\t\\ttrades[tradeId].seller.addr == msg.sender,\\n\\t\\t\\t\\\"you are not the authorized seller to claim\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction buyer(address _buyer) external {\\n\\t\\tisMerchant[_buyer] = true;\\n\\t}\\n\\n\\tfunction seller(address _seller) external {\\n\\t\\tisSeller[_seller] = true;\\n\\t}\\n\\n\\tfunction getPrice(uint256 LockETH) internal view returns (uint256) {\\n\\t\\tAggregatorV3Interface priceFeed = AggregatorV3Interface(\\n\\t\\t\\tpriceFeedAddress\\n\\t\\t);\\n\\t\\t(, int256 price, , , ) = priceFeed.latestRoundData();\\n\\t\\trequire(price > 0, \\\"Invalid price from oracle\\\");\\n\\t\\tuint256 ethPriceInUsd = uint256(price) * 1e10; // Adjust price for precision\\n\\t\\tuint256 usdValue = (LockETH * ethPriceInUsd) / 1e36; // Convert ETH to USD\\n\\t\\treturn usdValue;\\n\\t}\\n\\n\\tfunction startRound(\\n\\t\\tuint256 tradeId\\n\\t) external payable onlyParticipant(tradeId) {\\n\\t\\trequire(\\n\\t\\t\\tmsg.value == trades[tradeId].EthLock,\\n\\t\\t\\t\\\"Incorrect ETH amount sent by seller\\\"\\n\\t\\t);\\n\\t\\t// trades[tradeId].EthLock = tradeETH;\\n\\t\\ttrades[tradeId].InrAmount = getPrice(trades[tradeId].EthLock);\\n\\t}\\n\\tfunction submitProposalOffRAMP(uint256 tradeId, uint256 tradeETH) external {\\n\\t\\ttrades[tradeId].seller = Merchant(msg.sender, tradeETH);\\n\\t\\ttrades[tradeId].EthLock = tradeETH;\\n\\t}\\n\\n\\tfunction confirmOffRamp(\\n\\t\\taddress sellerAddress,\\n\\t\\tuint256 tradeId,\\n\\t\\tbytes memory _data\\n\\t) external returns (uint64) {\\n\\t\\taddress partyB = msg.sender;\\n\\t\\tif (trades[tradeId].seller.addr == sellerAddress) {\\n\\t\\t\\tbytes[] memory recipients = new bytes[](2);\\n\\t\\t\\trecipients[0] = abi.encode(sellerAddress);\\n\\t\\t\\trecipients[1] = abi.encode(partyB);\\n\\t\\t\\tbytes memory data = abi.encode(\\n\\t\\t\\t\\tsellerAddress,\\n\\t\\t\\t\\tpartyB,\\n\\t\\t\\t\\ttrades[tradeId].EthLock,\\n\\t\\t\\t\\t_data\\n\\t\\t\\t);\\n\\t\\t\\tAttestation memory a = Attestation({\\n\\t\\t\\t\\tschemaId: schemaId,\\n\\t\\t\\t\\tlinkedAttestationId: 0,\\n\\t\\t\\t\\tattestTimestamp: 0,\\n\\t\\t\\t\\trevokeTimestamp: 0,\\n\\t\\t\\t\\tattester: address(this),\\n\\t\\t\\t\\tvalidUntil: 0,\\n\\t\\t\\t\\tdataLocation: DataLocation.ONCHAIN,\\n\\t\\t\\t\\trevoked: false,\\n\\t\\t\\t\\trecipients: recipients,\\n\\t\\t\\t\\tdata: data\\n\\t\\t\\t});\\n\\t\\t\\tuint64 attestationId = spInstance.attest(a, \\\"\\\", \\\"\\\", \\\"\\\");\\n\\t\\t\\temit attestationEvent(attestationId);\\n\\t\\t\\ttrades[tradeId].agreed = true;\\n\\t\\t\\ttrades[tradeId].buyer = Merchant(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\ttrades[tradeId].EthLock\\n\\t\\t\\t);\\n\\t\\t\\treturn attestationId; //for this attestationid -> both parties match modifier\\n\\t\\t} else {\\n\\t\\t\\trevert ConfirmationAddressMismatch();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction claim(uint256 tradeId) external payable OnlySeller(tradeId) {\\n\\t\\tTrade storage trade = trades[tradeId];\\n\\t\\tuint256 amount = trade.EthLock;\\n\\t\\trequire(amount > 0, \\\"No ETH available to claim\\\");\\n\\t\\trequire(\\n\\t\\t\\ttrades[tradeId].INR_Paid_to_Seller > trades[tradeId].InrAmount * 83,\\n\\t\\t\\t\\\"you didnt transfer enough funds to your seller\\\"\\n\\t\\t);\\n\\t\\ttrade.EthLock = 0;\\n\\t\\t(bool success, ) = payable(trades[tradeId].buyer.addr).call{\\n\\t\\t\\tvalue: amount\\n\\t\\t}(\\\"\\\");\\n\\t\\trequire(success, \\\"Failed to send Ether to seller\\\");\\n\\t\\temit EthClaimed(\\n\\t\\t\\ttrades[tradeId].buyer.addr,\\n\\t\\t\\ttrades[tradeId].seller.addr,\\n\\t\\t\\ttradeId,\\n\\t\\t\\tamount\\n\\t\\t);\\n\\t}\\n\\n\\tfunction sendRequest(\\n\\t\\tuint256 tradeId,\\n\\t\\tuint64 subscriptionId,\\n\\t\\tstring[] calldata args\\n\\t) external OnlySeller(tradeId) returns (bytes32 requestId) {\\n\\t\\tFunctionsRequest.Request memory req;\\n\\t\\treq.initializeRequestForInlineJavaScript(source);\\n\\t\\tif (args.length > 0) req.setArgs(args);\\n\\t\\ts_lastRequestId = _sendRequest(\\n\\t\\t\\treq.encodeCBOR(),\\n\\t\\t\\tsubscriptionId,\\n\\t\\t\\tgasLimit,\\n\\t\\t\\tdonID\\n\\t\\t);\\n\\t\\trequestIdToTradeId[s_lastRequestId] = tradeId;\\n\\t\\ttrades[tradeId].s_lastRequestId = s_lastRequestId;\\n\\t\\treturn s_lastRequestId;\\n\\t}\\n\\n\\tfunction Read(\\n\\t\\tuint256 tradeId\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress buyerAddress,\\n\\t\\t\\tuint256 buyerCryptoLock,\\n\\t\\t\\taddress sellerAddress,\\n\\t\\t\\tuint256 sellerCryptoLock,\\n\\t\\t\\tstring memory trxMoney,\\n\\t\\t\\tuint256 inrAmount,\\n\\t\\t\\tuint256 ethLock,\\n\\t\\t\\tuint256 INR_Paid_to_Seller,\\n\\t\\t\\tbytes32 lastRequestId,\\n\\t\\t\\tbool agreed\\n\\t\\t)\\n\\t{\\n\\t\\tTrade storage trade = trades[tradeId];\\n\\t\\treturn (\\n\\t\\t\\ttrade.buyer.addr,\\n\\t\\t\\ttrade.buyer.cryptoLock,\\n\\t\\t\\ttrade.seller.addr,\\n\\t\\t\\ttrade.seller.cryptoLock,\\n\\t\\t\\ttrade.Trx_Money,\\n\\t\\t\\ttrade.InrAmount,\\n\\t\\t\\ttrade.EthLock,\\n\\t\\t\\ttrade.INR_Paid_to_Seller,\\n\\t\\t\\ttrade.s_lastRequestId,\\n\\t\\t\\ttrade.agreed\\n\\t\\t);\\n\\t}\\n\\n\\tfunction extractAmount(\\n\\t\\tstring memory input\\n\\t) internal pure returns (uint256) {\\n\\t\\tbytes memory inputBytes = bytes(input);\\n\\t\\tuint256 colonIndex = 0;\\n\\t\\tfor (uint256 i = 0; i < inputBytes.length; i++) {\\n\\t\\t\\tif (inputBytes[i] == \\\":\\\") {\\n\\t\\t\\t\\tcolonIndex = i;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tbytes memory amountBytes = new bytes(colonIndex);\\n\\t\\tfor (uint256 i = 0; i < colonIndex; i++) {\\n\\t\\t\\tamountBytes[i] = inputBytes[i];\\n\\t\\t}\\n\\t\\treturn stringToUint(string(amountBytes));\\n\\t}\\n\\n\\tfunction stringToUint(string memory s) internal pure returns (uint256) {\\n\\t\\tbytes memory b = bytes(s);\\n\\t\\tuint256 result = 0;\\n\\t\\tfor (uint256 i = 0; i < b.length; i++) {\\n\\t\\t\\tif (b[i] >= 0x30 && b[i] <= 0x39) {\\n\\t\\t\\t\\tresult = result * 10 + (uint256(uint8(b[i])) - 48);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t// Callback function for fulfilling a request\\n\\tfunction fulfillRequest(\\n\\t\\tbytes32 requestId,\\n\\t\\tbytes memory response,\\n\\t\\tbytes memory err\\n\\t) internal override {\\n\\t\\tif (s_lastRequestId != requestId) {\\n\\t\\t\\trevert UnexpectedRequestID(requestId); // Check if request IDs match\\n\\t\\t}\\n\\n\\t\\tuint256 tradeId = requestIdToTradeId[requestId];\\n\\t\\ttrades[tradeId].Trx_Money = string(response);\\n\\t\\ttrades[tradeId].INR_Paid_to_Seller = extractAmount(\\n\\t\\t\\ttrades[tradeId].Trx_Money\\n\\t\\t);\\n\\t\\ts_lastResponse = response;\\n\\t\\ts_lastError = err;\\n\\t\\temit Response(\\n\\t\\t\\trequestId,\\n\\t\\t\\ttrades[tradeId].Trx_Money,\\n\\t\\t\\ts_lastResponse,\\n\\t\\t\\ts_lastError\\n\\t\\t);\\n\\t}\\n\\n\\t// Inline JavaScript source code for the Chainlink request\\n\\tstring private constant source =\\n\\t\\t\\\"const characterId = args[0];\\\"\\n\\t\\t\\\"const characterId2 = args[1];\\\"\\n\\t\\t\\\"const apiResponse = await Functions.makeHttpRequest({\\\"\\n\\t\\t\\\"url: `https://gmail.googleapis.com/gmail/v1/users/me/messages/${characterId}/`, \\\"\\n\\t\\t\\\"headers: { \\\"\\n\\t\\t\\\"Authorization: `Bearer ${characterId2}`\\\"\\n\\t\\t\\\"}\\\"\\n\\t\\t\\\"});\\\"\\n\\t\\t\\\"if (apiResponse.error) {\\\"\\n\\t\\t\\\"return Functions.encodeString('Error: ' + apiResponse.error.message);\\\"\\n\\t\\t\\\"}\\\"\\n\\t\\t\\\"const { data } = apiResponse;\\\"\\n\\t\\t\\\"const snippet = data.snippet;\\\"\\n\\t\\t\\\"const amountRegex = /(?:\\\\\\\\u20B9\\\\\\\\s?|Paid to\\\\\\\\s?\\\\\\\\w+\\\\\\\\s?\\\\\\\\w+\\\\\\\\s?\\\\\\\\u20B9\\\\\\\\s?)(\\\\\\\\d+)/;\\\"\\n\\t\\t\\\"const txnIdRegex = /Txn\\\\\\\\.\\\\\\\\s?ID\\\\\\\\s?:\\\\\\\\s?(\\\\\\\\w+)/;\\\"\\n\\t\\t\\\"const amountMatch = snippet.match(amountRegex);\\\"\\n\\t\\t\\\"const amount = amountMatch ? amountMatch[1] : 'Amount not found';\\\"\\n\\t\\t\\\"const txnIdMatch = snippet.match(txnIdRegex);\\\"\\n\\t\\t\\\"const txnId = txnIdMatch ? txnIdMatch[1] : 'Txn ID not found';\\\"\\n\\t\\t\\\"return Functions.encodeString(amount + ':' + txnId);\\\";\\n}\\n\",\"keccak256\":\"0xdb8065529897d837d0f27e3955931c0aa2548b96c599068adfdf1ea70776056b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600280546001600160a01b031916734e4af2a21ebf62850fd99eb6253e1efbb56098cd1790553480156200003757600080fd5b5073234a5fb5bd614a7aa2ffab244d603abfa0ac5c5c6080523380600081620000a75760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000da57620000da81620000e3565b5050506200018e565b336001600160a01b038216036200013d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016200009e565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b608051612d8a620001b160003960008181610523015261168b0152612d8a6000f3fe6080604052600436106101355760003560e01c80635fc3d52d116100ab578063b1e217491161006f578063b1e21749146103fb578063b77482081461041f578063d070bb541461045e578063e9910c7014610473578063ee95feaf14610493578063f2fde38b146104c357600080fd5b80635fc3d52d1461036157806379ba5097146103745780638da5cb5b146103895780639fc17088146103bb578063a8c5dc33146103db57600080fd5b80631e6c598e116100fd5780631e6c598e1461026e578063379607f5146102a25780633944ea3a146102b557806339b9c30c146102d75780634b0795a8146103165780634fedc4de1461032b57600080fd5b806305ca8ee31461013a578063075b1a091461015c5780630ca76175146101a05780630fdae3c6146101c05780631a2f71671461022e575b600080fd5b34801561014657600080fd5b5061015a610155366004611f0d565b6104e3565b005b34801561016857600080fd5b5060025461018390600160a01b90046001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b3480156101ac57600080fd5b5061015a6101bb366004611fe7565b610518565b3480156101cc57600080fd5b5061015a6101db366004612053565b6040805180820182523381526020808201848152600095865260079091529190932092516002840180546001600160a01b0319166001600160a01b03909216919091179055516003830155600690910155565b34801561023a57600080fd5b5061025e610249366004612091565b60086020526000908152604090205460ff1681565b6040519015158152602001610197565b34801561027a57600080fd5b5061028e6102893660046120ac565b61059c565b60405161019798979695949392919061210b565b61015a6102b03660046120ac565b6106a0565b3480156102c157600080fd5b506102ca6108f2565b6040516101979190612183565b3480156102e357600080fd5b5061015a6102f2366004612091565b6001600160a01b03166000908152600960205260409020805460ff19166001179055565b34801561032257600080fd5b506102ca610980565b34801561033757600080fd5b5061034b6103463660046120ac565b61098d565b6040516101979a99989796959493929190612196565b61015a61036f3660046120ac565b610ab0565b34801561038057600080fd5b5061015a610be7565b34801561039557600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610197565b3480156103c757600080fd5b506101836103d6366004612203565b610c91565b3480156103e757600080fd5b506002546103a3906001600160a01b031681565b34801561040757600080fd5b5061041160035481565b604051908152602001610197565b34801561042b57600080fd5b5061015a61043a366004612091565b6001600160a01b03166000908152600860205260409020805460ff19166001179055565b34801561046a57600080fd5b506102ca610f4b565b34801561047f57600080fd5b5061041161048e36600461224f565b610f58565b34801561049f57600080fd5b5061025e6104ae366004612091565b60096020526000908152604090205460ff1681565b3480156104cf57600080fd5b5061015a6104de366004612091565b611079565b6104eb61108d565b600280546001600160401b03909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105615760405163c6829f8360e01b815260040160405180910390fd5b61056c8383836110e2565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6007602090815260009182526040918290208251808401845281546001600160a01b039081168252600183015482850152845180860190955260028301541684526003820154928401929092526004810180549293926105fb906122da565b80601f0160208091040260200160405190810160405280929190818152602001828054610627906122da565b80156106745780601f1061064957610100808354040283529160200191610674565b820191906000526020600020905b81548152906001019060200180831161065757829003601f168201915b505050600584015460068501546007860154600887015460099097015495969295919450925060ff1688565b60008181526007602052604090206002015481906001600160a01b031633146106e45760405162461bcd60e51b81526004016106db90612314565b60405180910390fd5b60008281526007602052604090206006810154806107445760405162461bcd60e51b815260206004820152601960248201527f4e6f2045544820617661696c61626c6520746f20636c61696d0000000000000060448201526064016106db565b600084815260076020526040902060050154610761906053612374565b60008581526007602081905260409091200154116107d85760405162461bcd60e51b815260206004820152602e60248201527f796f75206469646e74207472616e7366657220656e6f7567682066756e64732060448201526d3a37903cb7bab91039b2b63632b960911b60648201526084016106db565b600060068301819055848152600760205260408082205490516001600160a01b039091169083908381818185875af1925050503d8060008114610837576040519150601f19603f3d011682016040523d82523d6000602084013e61083c565b606091505b505090508061088d5760405162461bcd60e51b815260206004820152601e60248201527f4661696c656420746f2073656e6420457468657220746f2073656c6c6572000060448201526064016106db565b6000858152600760209081526040918290206002810154905483518981529283018690526001600160a01b03918216939116917fe1a0c1324c74af0f09ba89f1ed4681b67d9e8df76483770a7c1f861419b54797910160405180910390a35050505050565b600480546108ff906122da565b80601f016020809104026020016040519081016040528092919081815260200182805461092b906122da565b80156109785780601f1061094d57610100808354040283529160200191610978565b820191906000526020600020905b81548152906001019060200180831161095b57829003601f168201915b505050505081565b600580546108ff906122da565b6000818152600760208190526040822080546001820154600283015460038401546005850154600686015496860154600887015460098801546004890180548c9b8c9b8c9b60609b8d9b8c9b8c9b8c9b8c9b969a6001600160a01b039687169a95999490961697929694959194929390929160ff16908690610a0e906122da565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3a906122da565b8015610a875780601f10610a5c57610100808354040283529160200191610a87565b820191906000526020600020905b815481529060010190602001808311610a6a57829003601f168201915b505050505095509a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b60008181526007602052604090205481906001600160a01b0316331480610af057506000818152600760205260409020600201546001600160a01b031633145b610b475760405162461bcd60e51b815260206004820152602260248201527f4e6f7420617574686f72697a6564206f72207472616465206e6f742061677265604482015261195960f21b60648201526084016106db565b6000828152600760205260409020600601543414610bb35760405162461bcd60e51b815260206004820152602360248201527f496e636f72726563742045544820616d6f756e742073656e742062792073656c6044820152623632b960e91b60648201526084016106db565b600082815260076020526040902060060154610bce9061125c565b6000928352600760205260409092206005019190915550565b6001546001600160a01b03163314610c3a5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016106db565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60008281526007602052604081206002015433906001600160a01b03808716911603610f2b5760408051600280825260608201909252600091816020015b6060815260200190600190039081610ccf57905050604080516001600160a01b03891660208201529192500160405160208183030381529060405281600081518110610d1d57610d1d61238b565b602002602001018190525081604051602001610d4891906001600160a01b0391909116815260200190565b60405160208183030381529060405281600181518110610d6a57610d6a61238b565b602002602001018190525060008683600760008981526020019081526020016000206006015487604051602001610da494939291906123a1565b60408051601f19818403018152610140830182526002546001600160401b03600160a01b82041684526000602085018190528484018190526060850181905230608086015260a0850181905260c0850181905260e0850181905261010085018790526101208501839052925163b82916cb60e01b81529194506001600160a01b03169063b82916cb90610e3b908590600401612461565b6020604051808303816000875af1158015610e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7e9190612594565b6040516001600160401b03821681529091507fe65a4e50cc66413201ec77fa665f54961d549884769ca2325640e5932b92327f9060200160405180910390a16000888152600760208181526040808420600981018054600160ff19909116811790915582518084019093523383526006820154838501908152958e9052939092525181546001600160a01b0319166001600160a01b0390911617815591519101559450610f449350505050565b60405163e481626b60e01b815260040160405180910390fd5b9392505050565b600680546108ff906122da565b60008481526007602052604081206002015485906001600160a01b03163314610f935760405162461bcd60e51b81526004016106db90612314565b610fd46040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b610ffa6040518061034001604052806103108152602001612a4561031091398290611373565b83156110145761101461100d85876125b1565b8290611384565b611044611020826113ae565b87620493e07566756e2d617262697472756d2d7365706f6c69612d3160501b611686565b60038181556000918252600a602090815260408084208b90559154998352600790529020600801879055509495945050505050565b61108161108d565b61108a81611758565b50565b6000546001600160a01b031633146110e05760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016106db565b565b82600354146111075760405163d068bf5b60e01b8152600481018490526024016106db565b6000838152600a602090815260408083205480845260079092529091206004016111318482612696565b50600081815260076020526040902060040180546111d69190611153906122da565b80601f016020809104026020016040519081016040528092919081815260200182805461117f906122da565b80156111cc5780601f106111a1576101008083540402835291602001916111cc565b820191906000526020600020905b8154815290600101906020018083116111af57829003601f168201915b5050505050611801565b6000828152600760208190526040909120015560046111f58482612696565b5060056112028382612696565b50837f160ed0aaffbef6885155188b91459cb5a97d5daadccf7561d8c46deea6641b50600760008481526020019081526020016000206004016004600560405161124e939291906127d2565b60405180910390a250505050565b60008073d30e2101a97dcbaebcbc04f14c3f624e67a3516590506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156112b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112da9190612825565b505050915050600081136113305760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642070726963652066726f6d206f7261636c650000000000000060448201526064016106db565b6000611341826402540be400612374565b905060006ec097ce7bc90715b34b9f100000000061135f8388612374565b611369919061288b565b9695505050505050565b6113808260008084611913565b5050565b80516000036113a65760405163fe936cb760e01b815260040160405180910390fd5b60a090910152565b606060006113bd610100611991565b90506113f66040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b815250826119b290919063ffffffff16565b825161141490600281111561140d5761140d6123d4565b82906119d0565b6040805180820190915260088152676c616e677561676560c01b602082015261143e9082906119b2565b604083015161145590801561140d5761140d6123d4565b604080518082019091526006815265736f7572636560d01b602082015261147d9082906119b2565b606083015161148d9082906119b2565b60a08301515115611521576040805180820190915260048152636172677360e01b60208201526114be9082906119b2565b6114c781611a09565b60005b8360a0015151811015611517576115078460a0015182815181106114f0576114f061238b565b6020026020010151836119b290919063ffffffff16565b6115108161289f565b90506114ca565b5061152181611a2d565b608083015151156115e557600083602001516002811115611544576115446123d4565b036115625760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b60208201526115939082906119b2565b6115ac8360200151600281111561140d5761140d6123d4565b6040805180820190915260078152667365637265747360c81b60208201526115d59082906119b2565b60808301516115e5908290611a4b565b60c0830151511561167e5760408051808201909152600981526862797465734172677360b81b602082015261161b9082906119b2565b61162481611a09565b60005b8360c0015151811015611674576116648460c00151828151811061164d5761164d61238b565b602002602001015183611a4b90919063ffffffff16565b61166d8161289f565b9050611627565b5061167e81611a2d565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b81526004016116de9594939291906128b8565b6020604051808303816000875af11580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190612901565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b336001600160a01b038216036117b05760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016106db565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008181805b8251811015611855578281815181106118225761182261238b565b01602001516001600160f81b031916601d60f91b0361184357809150611855565b8061184d8161289f565b915050611807565b506000816001600160401b0381111561187057611870611f2a565b6040519080825280601f01601f19166020018201604052801561189a576020820181803683370190505b50905060005b82811015611900578381815181106118ba576118ba61238b565b602001015160f81c60f81b8282815181106118d7576118d761238b565b60200101906001600160f81b031916908160001a905350806118f88161289f565b9150506118a0565b5061190a81611a58565b95945050505050565b8051600003611935576040516322ce3edd60e01b815260040160405180910390fd5b83836002811115611948576119486123d4565b9081600281111561195b5761195b6123d4565b90525060408401828015611971576119716123d4565b90818015611981576119816123d4565b9052506060909301929092525050565b611999611ec3565b80516119a59083611b1c565b5060006020820152919050565b6119bf8260038351611b96565b81516119cb9082611cb5565b505050565b81516119dd9060c2611cd6565b5061138082826040516020016119f591815260200190565b604051602081830303815290604052611a4b565b611a14816004611d3f565b600181602001818151611a27919061291a565b90525050565b611a38816007611d3f565b600181602001818151611a27919061292d565b6119bf8260028351611b96565b60008181805b8251811015611b1457603060f81b838281518110611a7e57611a7e61238b565b01602001516001600160f81b03191610801590611abf5750603960f81b838281518110611aad57611aad61238b565b01602001516001600160f81b03191611155b15611b02576030838281518110611ad857611ad861238b565b0160200151611aea919060f81c61292d565b611af583600a612374565b611aff919061291a565b91505b80611b0c8161289f565b915050611a5e565b509392505050565b604080518082019091526060815260006020820152611b3c602083612940565b15611b6457611b4c602083612940565b611b5790602061292d565b611b61908361291a565b91505b602080840183905260405180855260008152908184010181811015611b8857600080fd5b604052508290505b92915050565b6017816001600160401b031611611bc2578251611bbc9060e0600585901b168317611cd6565b50505050565b60ff816001600160401b031611611c02578251611bea906018611fe0600586901b1617611cd6565b508251611bbc906001600160401b0383166001611d56565b61ffff816001600160401b031611611c43578251611c2b906019611fe0600586901b1617611cd6565b508251611bbc906001600160401b0383166002611d56565b63ffffffff816001600160401b031611611c86578251611c6e90601a611fe0600586901b1617611cd6565b508251611bbc906001600160401b0383166004611d56565b8251611c9d90601b611fe0600586901b1617611cd6565b508251611bbc906001600160401b0383166008611d56565b604080518082019091526060815260006020820152610f4483838451611ddb565b6040805180820190915260608152600060208201528251516000611cfb82600161291a565b905084602001518210611d1c57611d1c85611d17836002612374565b611eac565b8451602083820101858153508051821115611d35578181525b5093949350505050565b81516119cb90601f611fe0600585901b1617611cd6565b6040805180820190915260608152600060208201528351516000611d7a828561291a565b90508560200151811115611d9757611d9786611d17836002612374565b60006001611da786610100612a38565b611db1919061292d565b90508651828101878319825116178152508051831115611dcf578281525b50959695505050505050565b6040805180820190915260608152600060208201528251821115611dfe57600080fd5b8351516000611e0d848361291a565b90508560200151811115611e2a57611e2a86611d17836002612374565b855180518382016020019160009180851115611e44578482525b505050602086015b60208610611e845780518252611e6360208361291a565b9150611e7060208261291a565b9050611e7d60208761292d565b9550611e4c565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b8151611eb88383611b1c565b50611bbc8382611cb5565b6040518060400160405280611eeb604051806040016040528060608152602001600081525090565b8152602001600081525090565b6001600160401b038116811461108a57600080fd5b600060208284031215611f1f57600080fd5b8135610f4481611ef8565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611f6857611f68611f2a565b604052919050565b60006001600160401b03831115611f8957611f89611f2a565b611f9c601f8401601f1916602001611f40565b9050828152838383011115611fb057600080fd5b828260208301376000602084830101529392505050565b600082601f830112611fd857600080fd5b610f4483833560208501611f70565b600080600060608486031215611ffc57600080fd5b8335925060208401356001600160401b038082111561201a57600080fd5b61202687838801611fc7565b9350604086013591508082111561203c57600080fd5b5061204986828701611fc7565b9150509250925092565b6000806040838503121561206657600080fd5b50508035926020909101359150565b80356001600160a01b038116811461208c57600080fd5b919050565b6000602082840312156120a357600080fd5b610f4482612075565b6000602082840312156120be57600080fd5b5035919050565b6000815180845260005b818110156120eb576020818501810151868301820152016120cf565b506000602082860101526020601f19601f83011685010191505092915050565b88516001600160a01b031681526020808a015190820152600061014089516001600160a01b0316604084015260208a015160608401528060808401526121538184018a6120c5565b60a0840198909852505060c081019490945260e08401929092526101008301521515610120909101529392505050565b602081526000610f4460208301846120c5565b6001600160a01b038b81168252602082018b90528916604082015260608101889052610140608082018190526000906121d18382018a6120c5565b60a0840198909852505060c081019490945260e084019290925261010083015215156101209091015295945050505050565b60008060006060848603121561221857600080fd5b61222184612075565b92506020840135915060408401356001600160401b0381111561224357600080fd5b61204986828701611fc7565b6000806000806060858703121561226557600080fd5b84359350602085013561227781611ef8565b925060408501356001600160401b038082111561229357600080fd5b818701915087601f8301126122a757600080fd5b8135818111156122b657600080fd5b8860208260051b85010111156122cb57600080fd5b95989497505060200194505050565b600181811c908216806122ee57607f821691505b60208210810361230e57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602a908201527f796f7520617265206e6f742074686520617574686f72697a65642073656c6c656040820152697220746f20636c61696d60b01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611b9057611b9061235e565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611369908301846120c5565b634e487b7160e01b600052602160045260246000fd5b6004811061240857634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501808196508360051b8101915082860160005b858110156124545782840389526124428483516120c5565b9885019893509084019060010161242a565b5091979650505050505050565b6080815261247b6080820183516001600160401b03169052565b6000602083015161249760a08401826001600160401b03169052565b5060408301516001600160401b0390811660c084015260608401511660e083015260808301516001600160a01b0381166101008085019190915260a085015191506101206124ef818601846001600160401b03169052565b60c08601519250610140612505818701856123ea565b60e0870151151561016087015282870151610180870191909152925061252f6101c086018461240c565b90860151858203607f19016101a0870152909250905061254f82826120c5565b9150508281036020840152612568816000815260200190565b838103604085015260008152905060208101838103606085015260008152905060208101949350505050565b6000602082840312156125a657600080fd5b8151610f4481611ef8565b60006001600160401b03808411156125cb576125cb611f2a565b8360051b60206125dc818301611f40565b8681529185019181810190368411156125f457600080fd5b865b8481101561263c5780358681111561260e5760008081fd5b880136601f8201126126205760008081fd5b61262e368235878401611f70565b8452509183019183016125f6565b50979650505050505050565b601f8211156119cb57600081815260208120601f850160051c8101602086101561266f5750805b601f850160051c820191505b8181101561268e5782815560010161267b565b505050505050565b81516001600160401b038111156126af576126af611f2a565b6126c3816126bd84546122da565b84612648565b602080601f8311600181146126f857600084156126e05750858301515b600019600386901b1c1916600185901b17855561268e565b600085815260208120601f198616915b8281101561272757888601518255948401946001909101908401612708565b50858210156127455787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008154612762816122da565b80855260206001838116801561277f5760018114612799576127c7565b60ff1985168884015283151560051b8801830195506127c7565b866000528260002060005b858110156127bf5781548a82018601529083019084016127a4565b890184019650505b505050505092915050565b6060815260006127e56060830186612755565b82810360208401526127f78186612755565b905082810360408401526113698185612755565b805169ffffffffffffffffffff8116811461208c57600080fd5b600080600080600060a0868803121561283d57600080fd5b6128468661280b565b94506020860151935060408601519250606086015191506128696080870161280b565b90509295509295909350565b634e487b7160e01b600052601260045260246000fd5b60008261289a5761289a612875565b500490565b6000600182016128b1576128b161235e565b5060010190565b6001600160401b038616815260a0602082015260006128da60a08301876120c5565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b60006020828403121561291357600080fd5b5051919050565b80820180821115611b9057611b9061235e565b81810381811115611b9057611b9061235e565b60008261294f5761294f612875565b500690565b600181815b8085111561298f5781600019048211156129755761297561235e565b8085161561298257918102915b93841c9390800290612959565b509250929050565b6000826129a657506001611b90565b816129b357506000611b90565b81600181146129c957600281146129d3576129ef565b6001915050611b90565b60ff8411156129e4576129e461235e565b50506001821b611b90565b5060208310610133831016604e8410600b8410161715612a12575081810a611b90565b612a1c8383612954565b8060001904821115612a3057612a3061235e565b029392505050565b6000610f44838361299756fe636f6e7374206368617261637465724964203d20617267735b305d3b636f6e737420636861726163746572496432203d20617267735b315d3b636f6e737420617069526573706f6e7365203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a206068747470733a2f2f676d61696c2e676f6f676c65617069732e636f6d2f676d61696c2f76312f75736572732f6d652f6d657373616765732f247b63686172616374657249647d2f602c20686561646572733a207b20417574686f72697a6174696f6e3a206042656172657220247b6368617261637465724964327d607d7d293b69662028617069526573706f6e73652e6572726f7229207b72657475726e2046756e6374696f6e732e656e636f6465537472696e6728274572726f723a2027202b20617069526573706f6e73652e6572726f722e6d657373616765293b7d636f6e7374207b2064617461207d203d20617069526573706f6e73653b636f6e737420736e6970706574203d20646174612e736e69707065743b636f6e737420616d6f756e745265676578203d202f283f3a5c75323042395c733f7c5061696420746f5c733f5c772b5c733f5c772b5c733f5c75323042395c733f29285c642b292f3b636f6e73742074786e49645265676578203d202f54786e5c2e5c733f49445c733f3a5c733f285c772b292f3b636f6e737420616d6f756e744d61746368203d20736e69707065742e6d6174636828616d6f756e745265676578293b636f6e737420616d6f756e74203d20616d6f756e744d61746368203f20616d6f756e744d617463685b315d203a2027416d6f756e74206e6f7420666f756e64273b636f6e73742074786e49644d61746368203d20736e69707065742e6d617463682874786e49645265676578293b636f6e73742074786e4964203d2074786e49644d61746368203f2074786e49644d617463685b315d203a202754786e204944206e6f7420666f756e64273b72657475726e2046756e6374696f6e732e656e636f6465537472696e6728616d6f756e74202b20273a27202b2074786e4964293ba2646970667358221220116a4b0c8acaddb67dbc752b43627577e69e2b95ce54518caebf10abbf88570c64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 862,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 864,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3232,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "spInstance",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISP)2809"
      },
      {
        "astId": 3234,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "schemaId",
        "offset": 20,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 3236,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "s_lastRequestId",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 3238,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "s_lastResponse",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      },
      {
        "astId": 3240,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "s_lastError",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      },
      {
        "astId": 3242,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "characters",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 3265,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "trades",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Trade)3301_storage)"
      },
      {
        "astId": 3269,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "isMerchant",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3273,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "isSeller",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3277,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "requestIdToTradeId",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ISP)2809": {
        "encoding": "inplace",
        "label": "contract ISP",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Trade)3301_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct offRampBased.Trade)",
        "numberOfBytes": "32",
        "value": "t_struct(Trade)3301_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Merchant)3282_storage": {
        "encoding": "inplace",
        "label": "struct offRampBased.Merchant",
        "members": [
          {
            "astId": 3279,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3281,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "cryptoLock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Trade)3301_storage": {
        "encoding": "inplace",
        "label": "struct offRampBased.Trade",
        "members": [
          {
            "astId": 3285,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "buyer",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Merchant)3282_storage"
          },
          {
            "astId": 3288,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Merchant)3282_storage"
          },
          {
            "astId": 3290,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "Trx_Money",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3292,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "InrAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3294,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "EthLock",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3296,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "INR_Paid_to_Seller",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3298,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "s_lastRequestId",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes32"
          },
          {
            "astId": 3300,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "agreed",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}