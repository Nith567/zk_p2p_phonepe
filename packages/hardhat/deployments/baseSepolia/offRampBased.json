{
  "address": "0x3662f3a98ee939673b04DF3D9Ac44859fAF7F80b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ConfirmationAddressMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeETH",
          "type": "uint256"
        }
      ],
      "name": "DoubleDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "EthClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        }
      ],
      "name": "ClaimByBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "txnId",
          "type": "bytes32"
        }
      ],
      "name": "confirmBySeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sellerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "confirmOffRamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradeETH",
          "type": "uint256"
        }
      ],
      "name": "doubleDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMerchant",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSeller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schemaId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        }
      ],
      "name": "sendVerifyByBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spInstance",
      "outputs": [
        {
          "internalType": "contract ISP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tradeId",
          "type": "uint256"
        }
      ],
      "name": "startRound",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trades",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cryptoLock",
              "type": "uint256"
            }
          ],
          "internalType": "struct offRampBased.Merchant",
          "name": "buyer",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cryptoLock",
              "type": "uint256"
            }
          ],
          "internalType": "struct offRampBased.Merchant",
          "name": "seller",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "Trx_Money",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "InrAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "extraEth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "EthLock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "agreed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "Paid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "remaningEth",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "dealDone",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2d57b8a11350f84f1ac78bfb0763f30b6dc96e7f2cb2d20267df549e88a68e3",
  "receipt": {
    "to": null,
    "from": "0x2D62332066e2735DEbEaf71AFE343236C9Ee7a1e",
    "contractAddress": "0x3662f3a98ee939673b04DF3D9Ac44859fAF7F80b",
    "transactionIndex": 6,
    "gasUsed": "964935",
    "logsBloom": "0x
    "blockHash": "0x5b4940938dd0c067c598ed474a561c19aec33d6f6eb963faca7515cb8a72317e",
    "transactionHash": "0xa2d57b8a11350f84f1ac78bfb0763f30b6dc96e7f2cb2d20267df549e88a68e3",
    "logs": [],
    "blockNumber": 18928122,
    "cumulativeGasUsed": "1522857",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "ec408d62412da3108684bdc93b75f4af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ConfirmationAddressMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeETH\",\"type\":\"uint256\"}],\"name\":\"DoubleDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"EthClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"}],\"name\":\"ClaimByBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txnId\",\"type\":\"bytes32\"}],\"name\":\"confirmBySeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"confirmOffRamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeETH\",\"type\":\"uint256\"}],\"name\":\"doubleDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMerchant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schemaId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"sendVerifyByBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spInstance\",\"outputs\":[{\"internalType\":\"contract ISP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeId\",\"type\":\"uint256\"}],\"name\":\"startRound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trades\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cryptoLock\",\"type\":\"uint256\"}],\"internalType\":\"struct offRampBased.Merchant\",\"name\":\"buyer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cryptoLock\",\"type\":\"uint256\"}],\"internalType\":\"struct offRampBased.Merchant\",\"name\":\"seller\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"Trx_Money\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"InrAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EthLock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"agreed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Paid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"remaningEth\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"dealDone\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/offRampBased.sol\":\"offRampBased\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n}\\n\",\"keccak256\":\"0x0ebc4375ecd10d2d747dc00520b8e51f9f13bbfe894097d2bd470527345d6a5d\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IVersionable } from \\\"./IVersionable.sol\\\";\\nimport { Schema } from \\\"../models/Schema.sol\\\";\\nimport { Attestation, OffchainAttestation } from \\\"../models/Attestation.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Sign Protocol Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISP is IVersionable {\\n    event SchemaRegistered(uint64 schemaId);\\n    event AttestationMade(uint64 attestationId, string indexingKey);\\n    event AttestationRevoked(uint64 attestationId, string reason);\\n    event OffchainAttestationMade(string attestationId);\\n    event OffchainAttestationRevoked(string attestationId, string reason);\\n\\n    /**\\n     * @dev 0x9e87fac8\\n     */\\n    error Paused();\\n    /**\\n     * @dev 0x38f8c6c4\\n     */\\n    error SchemaNonexistent();\\n    /**\\n     * @dev 0x71984561\\n     */\\n    error SchemaWrongRegistrant();\\n    /**\\n     * @dev 0x8ac42f49\\n     */\\n    error AttestationIrrevocable();\\n    /**\\n     * @dev 0x54681a13\\n     */\\n    error AttestationNonexistent();\\n    /**\\n     * @dev 0xa65e02ed\\n     */\\n    error AttestationInvalidDuration();\\n    /**\\n     * @dev 0xd8c3da86\\n     */\\n    error AttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xa9ad2007\\n     */\\n    error AttestationWrongAttester();\\n    /**\\n     * @dev 0xc83e3cdf\\n     */\\n    error OffchainAttestationExists();\\n    /**\\n     * @dev 0xa006519a\\n     */\\n    error OffchainAttestationNonexistent();\\n    /**\\n     * @dev 0xa0671d20\\n     */\\n    error OffchainAttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xfdf4e6f9\\n     */\\n    error InvalidDelegateSignature();\\n    /**\\n     * @dev 0x5c34b9cc\\n     */\\n    error LegacySPRequired();\\n\\n    /**\\n     * @notice Registers a Schema.\\n     * @dev Emits `SchemaRegistered`.\\n     * @param schema See `Schema`.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @return schemaId The assigned ID of the registered schema.\\n     */\\n    function register(Schema memory schema, bytes calldata delegateSignature) external returns (uint64 schemaId);\\n\\n    /**\\n     * @notice Makes an attestation.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ETH payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        uint256 resolverFeesETH,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Timestamps an off-chain data ID.\\n     * @dev Emits `OffchainAttestationMade`.\\n     * @param offchainAttestationId The off-chain data ID.\\n     * @param delegateAttester An optional delegated attester that authorized the caller to attest on their behalf if\\n     * this is a delegated attestation. Use `address(0)` otherwise.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise. Use `\\\"\\\"` or `0x` otherwise.\\n     */\\n    function attestOffchain(\\n        string calldata offchainAttestationId,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        uint256 resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing offchain attestation.\\n     * @dev Emits `OffchainAttestationRevoked`. Must be called by the attester.\\n     * @param offchainAttestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     */\\n    function revokeOffchain(\\n        string calldata offchainAttestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch registers a Schema.\\n     */\\n    function registerBatch(\\n        Schema[] calldata schemas,\\n        bytes calldata delegateSignature\\n    )\\n        external\\n        returns (uint64[] calldata schemaIds);\\n\\n    /**\\n     * @notice Batch attests.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ETH payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata resolverFeesETH,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ERC20 payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch timestamps off-chain data IDs.\\n     */\\n    function attestOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ETH payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        uint256[] calldata resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes off-chain attestations.\\n     */\\n    function revokeOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Returns the specified `Schema`.\\n     */\\n    function getSchema(uint64 schemaId) external view returns (Schema calldata);\\n\\n    /**\\n     * @notice Returns the specified `Attestation`.\\n     */\\n    function getAttestation(uint64 attestationId) external view returns (Attestation calldata);\\n\\n    /**\\n     * @notice Returns the specified `OffchainAttestation`.\\n     */\\n    function getOffchainAttestation(string calldata offchainAttestationId)\\n        external\\n        view\\n        returns (OffchainAttestation calldata);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated registration.\\n     */\\n    function getDelegatedRegisterHash(Schema memory schema) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch registration.\\n     */\\n    function getDelegatedRegisterBatchHash(Schema[] memory schemas) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated attestation.\\n     */\\n    function getDelegatedAttestHash(Attestation calldata attestation) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch attestation.\\n     */\\n    function getDelegatedAttestBatchHash(Attestation[] calldata attestations) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestHash(string calldata offchainAttestationId) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestBatchHash(string[] calldata offchainAttestationIds)\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated revocation.\\n     */\\n    function getDelegatedRevokeHash(uint64 attestationId, string memory reason) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch revocation.\\n     */\\n    function getDelegatedRevokeBatchHash(\\n        uint64[] memory attestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeHash(\\n        string memory offchainAttestationId,\\n        string memory reason\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeBatchHash(\\n        string[] memory offchainAttestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the current schema counter. This is incremented for each `Schema` registered.\\n     */\\n    function schemaCounter() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the current on-chain attestation counter. This is incremented for each `Attestation` made.\\n     */\\n    function attestationCounter() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd5ddbb7cc6af2ee4c11d6c5dac739fc6254d84e13167bc054eb4477244490756\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SIGN Attestation Protocol Resolver Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISPHook {\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xa42159d34c4b8fa91507efacad81c14106f466efdc63b81a7d566dc0d2e736f4\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IVersionable\\n * @author Jack Xu @ EthSign\\n * @dev This interface helps contracts to keep track of their versioning for upgrade compatibility checks.\\n */\\ninterface IVersionable {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xbcf1955aa8423f4f77a46a988a7cd41a46ae92af42aa4546cfebdc2a92916129\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Attestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain attestation record. This record is not deleted after revocation.\\n *\\n * `schemaId`: The `Schema` that this Attestation is based on. It must exist.\\n * `linkedAttestationId`: Useful if the current Attestation references a previous Attestation. It can either be 0 or an\\n * existing attestation ID.\\n * `attestTimestamp`: When the attestation was made. This is automatically populated by `_attest(...)`.\\n * `revokeTimestamp`: When the attestation was revoked. This is automatically populated by `_revoke(...)`.\\n * `attester`: The attester. At this time, the attester must be the caller of `attest()`.\\n * `validUntil`: The expiration timestamp of the Attestation. Must respect `Schema.maxValidFor`. 0 indicates no\\n * expiration date.\\n * `dataLocation`: Where `Attestation.data` is stored. See `DataLocation.DataLocation`.\\n * `revoked`: If the Attestation has been revoked. It is possible to make a revoked Attestation.\\n * `recipients`: The intended ABI-encoded recipients of this Attestation. This is of type `bytes` to support non-EVM\\n * repicients.\\n * `data`: The raw data of the Attestation based on `Schema.schema`. There is no enforcement here, however. Recommended\\n * to use `abi.encode`.\\n */\\nstruct Attestation {\\n    uint64 schemaId;\\n    uint64 linkedAttestationId;\\n    uint64 attestTimestamp;\\n    uint64 revokeTimestamp;\\n    address attester;\\n    uint64 validUntil;\\n    DataLocation dataLocation;\\n    bool revoked;\\n    bytes[] recipients;\\n    bytes data;\\n}\\n\\n/**\\n * @title OffchainAttestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an off-chain attestation record. This record is not deleted after revocation.\\n *\\n * `attester`: The attester. At this time, the attester must be the caller of `attestOffchain()`.\\n * `timestamp`: The `block.timestamp` of the function call.\\n */\\nstruct OffchainAttestation {\\n    address attester;\\n    uint64 timestamp;\\n}\\n\",\"keccak256\":\"0x8e2a182141d06bfdcce1325d70e8dd307f7d6b3d7b6fafcedc2dbabeb99fa30f\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title DataLocation\\n * @author Jack Xu @ EthSign\\n * @notice This enum indicates where `Schema.data` and `Attestation.data` are stored.\\n */\\nenum DataLocation {\\n    ONCHAIN,\\n    ARWEAVE,\\n    IPFS,\\n    CUSTOM\\n}\\n\",\"keccak256\":\"0x14f64929317cae8ae822a0dd2c20315ac141f10fa255cd2b13a0a4962385ec10\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Schema.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ISPHook } from \\\"../interfaces/ISPHook.sol\\\";\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Schema\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain Schema that Attestations can conform to.\\n *\\n * `registrant`: The address that registered this schema.\\n * `revocable`: Whether Attestations that adopt this Schema can be revoked.\\n * `dataLocation`: Where `Schema.data` is stored. See `DataLocation.DataLocation`.\\n * `maxValidFor`: The maximum number of seconds that an Attestation can remain valid. 0 means Attestations can be valid\\n * forever. This is enforced through `Attestation.validUntil`.\\n * `hook`: The `ISPHook` that is called at the end of every function. 0 means there is no hook set. See\\n * `ISPHook`.\\n * `timestamp`: When the schema was registered. This is automatically populated by `_register(...)`.\\n * `data`: The raw schema that `Attestation.data` should follow. Since there is no way to enforce this, it is a `string`\\n * for easy readability.\\n */\\nstruct Schema {\\n    address registrant;\\n    bool revocable;\\n    DataLocation dataLocation;\\n    uint64 maxValidFor;\\n    ISPHook hook;\\n    uint64 timestamp;\\n    string data;\\n}\\n\",\"keccak256\":\"0xcf3bd964790fdc7f72bacc86380b307e58bf15fa5f7332852d4969fe0db58216\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/offRampBased.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ISP } from \\\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\\\";\\nimport { Attestation } from \\\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\\\";\\nimport { DataLocation } from \\\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\\\";\\n\\ncontract offRampBased {\\n\\taddress private constant priceFeedAddress =\\n\\t\\t0x4aDC67696bA383F43DD60A9e78F2C97Fbbfc7cb1;\\n\\terror ConfirmationAddressMismatch();\\n\\n\\tevent EthClaimed(\\n\\t\\taddress indexed seller,\\n\\t\\taddress indexed buyer,\\n\\t\\tuint256 tradeId,\\n\\t\\tuint256 amountClaimed\\n\\t);\\n\\n\\tstruct Merchant {\\n\\t\\taddress addr;\\n\\t\\tuint256 cryptoLock;\\n\\t}\\n\\tstruct Trade {\\n\\t\\tMerchant buyer;\\n\\t\\tMerchant seller;\\n\\t\\tstring Trx_Money;\\n\\t\\tuint256 InrAmount;\\n\\t\\tuint256 extraEth;\\n\\t\\tuint256 EthLock;\\n\\t\\tbool agreed;\\n\\t\\tbool Paid;\\n\\t\\tuint256 remaningEth;\\n\\t\\tbool dealDone;\\n\\t}\\n\\tISP public spInstance = ISP(0x4e4af2a21ebf62850fD99Eb6253E1eFBb56098cD);\\n\\tuint64 public schemaId = 244;\\n\\tmapping(uint256 => Trade) public trades;\\n\\tmapping(address => bool) public isMerchant;\\n\\tmapping(address => bool) public isSeller;\\n\\tmapping(bytes32 => uint256) private requestIdToTradeId;\\n\\n\\tconstructor() {}\\n\\n\\tfunction addressToUint256(address _addr) private pure returns (uint256) {\\n\\t\\treturn uint256(uint160(_addr));\\n\\t}\\n\\n\\tfunction confirmOffRamp(\\n\\t\\taddress sellerAddress,\\n\\t\\tuint256 tradeId,\\n\\t\\tbytes memory _data\\n\\t) external returns (uint64) {\\n\\t\\taddress partyB = msg.sender;\\n\\t\\tif (trades[tradeId].seller.addr == sellerAddress) {\\n\\t\\t\\tbytes[] memory recipients = new bytes[](2);\\n\\t\\t\\trecipients[0] = abi.encode(sellerAddress);\\n\\t\\t\\trecipients[1] = abi.encode(partyB);\\n\\t\\t\\tbytes memory data = abi.encode(\\n\\t\\t\\t\\tsellerAddress,\\n\\t\\t\\t\\tpartyB,\\n\\t\\t\\t\\ttrades[tradeId].seller.cryptoLock,\\n\\t\\t\\t\\t_data\\n\\t\\t\\t);\\n\\t\\t\\tAttestation memory a = Attestation({\\n\\t\\t\\t\\tschemaId: schemaId,\\n\\t\\t\\t\\tlinkedAttestationId: 0,\\n\\t\\t\\t\\tattestTimestamp: 0,\\n\\t\\t\\t\\trevokeTimestamp: 0,\\n\\t\\t\\t\\tattester: address(this),\\n\\t\\t\\t\\tvalidUntil: 0,\\n\\t\\t\\t\\tdataLocation: DataLocation.ONCHAIN,\\n\\t\\t\\t\\trevoked: false,\\n\\t\\t\\t\\trecipients: recipients,\\n\\t\\t\\t\\tdata: data\\n\\t\\t\\t});\\n\\t\\t\\tuint64 attestationId = spInstance.attest(a, \\\"\\\", \\\"\\\", \\\"\\\");\\n\\t\\t\\ttrades[tradeId].agreed = true;\\n\\t\\t\\ttrades[tradeId].EthLock = trades[tradeId].seller.cryptoLock;\\n\\t\\t\\ttrades[tradeId].buyer = Merchant(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\ttrades[tradeId].EthLock\\n\\t\\t\\t);\\n\\t\\t\\treturn attestationId; //for this attestationid -> both parties match modifier\\n\\t\\t} else {\\n\\t\\t\\trevert ConfirmationAddressMismatch();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction sendVerifyByBuyer(uint256 tradeId, uint256 amountPaid) public {\\n\\t\\t//proof from the buyer with rupees\\n\\t\\t//here buyer sends payment through phonepe and make zk proof->\\n\\t\\t//require() statement needed\\n\\t\\tuint256 rupeee;\\n\\t\\trequire(\\n\\t\\t\\tamountPaid >= getPrice(trades[tradeId].EthLock),\\n\\t\\t\\t\\\"Amount must be more than or equal to INR Amount\\\"\\n\\t\\t);\\n\\t\\ttrades[tradeId].Paid = true;\\n\\t}\\n\\n\\t//enter tnxid by the seller and take your half of amount money -:)and you got your money in your bank+remaming eth(x2) in your wallet\\n\\t//the original-x amount went to buyer\\n\\tfunction confirmBySeller(uint256 tradeId, bytes32 txnId) external {\\n\\t\\t//enter private tnxID and check , verify from the buyer rom signals array bit\\n\\t\\t//if yes then\\n\\t\\tuint256 halfEth = trades[tradeId].EthLock / 2;\\n\\t\\trequire(halfEth > 0, \\\"[Error]: No sufficient ETH to claim\\\");\\n\\t\\tpayable(msg.sender).transfer(halfEth);\\n\\t\\ttrades[tradeId].dealDone == true;\\n\\t}\\n\\n\\tfunction ClaimByBuyer(uint256 tradeId) external {\\n\\t\\trequire(\\n\\t\\t\\ttrades[tradeId].dealDone,\\n\\t\\t\\t\\\"seller didnt entered/invalid output\\\"\\n\\t\\t);\\n\\t\\tpayable(msg.sender).transfer(trades[tradeId].remaningEth);\\n\\t}\\n\\n\\tmodifier OnlySeller(uint256 tradeId) {\\n\\t\\trequire(\\n\\t\\t\\ttrades[tradeId].seller.addr == msg.sender,\\n\\t\\t\\t\\\"you are not the authorized seller to claim\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\tfunction getPrice(uint256 LockETH) internal view returns (uint256) {\\n\\t\\tAggregatorV3Interface priceFeed = AggregatorV3Interface(\\n\\t\\t\\tpriceFeedAddress\\n\\t\\t);\\n\\t\\t(, int256 price, , , ) = priceFeed.latestRoundData();\\n\\t\\trequire(price > 0, \\\"Invalid price from oracle\\\");\\n\\t\\tuint256 ethPriceInUsd = uint256(price) * 1e10; // Adjust price for precision\\n\\t\\tuint256 usdValue = (LockETH * ethPriceInUsd) / 1e36; // Convert ETH to USD\\n\\t\\treturn usdValue;\\n\\t}\\n\\n\\tmodifier onlyBuyer(uint256 tradeId) {\\n\\t\\trequire(\\n\\t\\t\\ttrades[tradeId].buyer.addr == msg.sender,\\n\\t\\t\\t\\\"you are not the authorized seller to claim\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\tevent DoubleDeposit(\\n\\t\\tuint256 indexed tradeId,\\n\\t\\taddress indexed seller,\\n\\t\\tuint256 tradeETH\\n\\t);\\n\\n\\tfunction doubleDeposit(uint256 tradeId, uint256 tradeETH) external {\\n\\t\\ttrades[tradeId].seller = Merchant(msg.sender, tradeETH);\\n\\t\\temit DoubleDeposit(tradeId, msg.sender, tradeETH);\\n\\t}\\n\\n\\tfunction startRound(uint256 tradeId) external payable {\\n\\t\\tuint256 requiredETH = trades[tradeId].EthLock;\\n\\t\\tuint256 doubledETH = requiredETH * 2;\\n\\t\\t// Ensure the seller pays double the required ETH amount later can withdraw other half of it :-)\\n\\t\\trequire(\\n\\t\\t\\tmsg.value == doubledETH,\\n\\t\\t\\t\\\"Incorrect ETH amount sent by seller into contract, must be double the required ETH\\\"\\n\\t\\t);\\n\\t\\ttrades[tradeId].extraEth = doubledETH - requiredETH;\\n\\t}\\n}\\n\",\"keccak256\":\"0x0ed1c6622fb076fb5a59eb25b11c8664cbbc28f5b55c141bc664ff9d58b3328c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600080546001600160e01b03191674f44e4af2a21ebf62850fd99eb6253e1efbb56098cd17905534801561003757600080fd5b50611015806100476000396000f3fe60806040526004361061009c5760003560e01c80635cffa76f116100645780635cffa76f1461019f5780635fc3d52d146101bf578063708d8372146101d25780639fc17088146101f2578063a8c5dc3314610212578063ee95feaf1461024a57600080fd5b806301e9502a146100a1578063075b1a09146100c35780631a2f7167146101095780631e6c598e146101495780632c927c7d1461017f575b600080fd5b3480156100ad57600080fd5b506100c16100bc366004610a90565b61027a565b005b3480156100cf57600080fd5b506000546100eb90600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b34801561011557600080fd5b50610139610124366004610ac5565b60026020526000908152604090205460ff1681565b6040519015158152602001610100565b34801561015557600080fd5b50610169610164366004610a90565b61032d565b6040516101009a99989796959493929190610b26565b34801561018b57600080fd5b506100c161019a366004610baf565b610445565b3480156101ab57600080fd5b506100c16101ba366004610baf565b6104e9565b6100c16101cd366004610a90565b61056d565b3480156101de57600080fd5b506100c16101ed366004610baf565b610641565b3480156101fe57600080fd5b506100eb61020d366004610be7565b6106f7565b34801561021e57600080fd5b50600054610232906001600160a01b031681565b6040516001600160a01b039091168152602001610100565b34801561025657600080fd5b50610139610265366004610ac5565b60036020526000908152604090205460ff1681565b6000818152600160205260409020600a015460ff166102ec5760405162461bcd60e51b815260206004820152602360248201527f73656c6c6572206469646e7420656e74657265642f696e76616c6964206f75746044820152621c1d5d60ea1b60648201526084015b60405180910390fd5b600081815260016020526040808220600901549051339282156108fc02929190818181858888f19350505050158015610329573d6000803e3d6000fd5b5050565b6001602081815260009283526040928390208351808501855281546001600160a01b039081168252938201548184015284518086019095526002820154909316845260038101549184019190915260048101805492939261038d90610cb2565b80601f01602080910402602001604051908101604052809291908181526020018280546103b990610cb2565b80156104065780601f106103db57610100808354040283529160200191610406565b820191906000526020600020905b8154815290600101906020018083116103e957829003601f168201915b50505060058401546006850154600786015460088701546009880154600a909801549697939692955090935060ff80821693610100909204811692168a565b60008281526001602052604081206007015461046090610979565b8210156104c75760405162461bcd60e51b815260206004820152602f60248201527f416d6f756e74206d757374206265206d6f7265207468616e206f72206571756160448201526e1b081d1bc812539488105b5bdd5b9d608a1b60648201526084016102e3565b50506000908152600160205260409020600801805461ff001916610100179055565b60408051808201825233808252602080830185815260008781526001835285902093516002850180546001600160a01b0319166001600160a01b0390921691909117905551600390930192909255915183815284917f79cb74369f9a8fb0e988943a7da5ff39f09c312f56d1c5e03f2eb03deddd51bc910160405180910390a35050565b6000818152600160205260408120600701549061058b826002610d02565b905080341461061d5760405162461bcd60e51b815260206004820152605260248201527f496e636f72726563742045544820616d6f756e742073656e742062792073656c60448201527f6c657220696e746f20636f6e74726163742c206d75737420626520646f75626c6064820152710ca40e8d0ca40e4cae2ead2e4cac8408aa8960731b608482015260a4016102e3565b6106278282610d1f565b600093845260016020526040909320600601929092555050565b60008281526001602052604081206007015461065f90600290610d32565b9050600081116106bd5760405162461bcd60e51b815260206004820152602360248201527f5b4572726f725d3a204e6f2073756666696369656e742045544820746f20636c60448201526261696d60e81b60648201526084016102e3565b604051339082156108fc029083906000818181858888f193505050501580156106ea573d6000803e3d6000fd5b5050506000526001602052565b60008281526001602052604081206002015433906001600160a01b038087169116036109595760408051600280825260608201909252600091816020015b606081526020019060019003908161073557905050604080516001600160a01b0389166020820152919250016040516020818303038152906040528160008151811061078357610783610d54565b6020026020010181905250816040516020016107ae91906001600160a01b0391909116815260200190565b604051602081830303815290604052816001815181106107d0576107d0610d54565b60200260200101819052506000868360016000898152602001908152602001600020600201600101548760405160200161080d9493929190610d6a565b60408051601f19818403018152610140830182526000805467ffffffffffffffff600160a01b8204168552602085018290528484018290526060850182905230608086015260a0850182905260c0850182905260e0850182905261010085018790526101208501839052925163b82916cb60e01b8152919450916001600160a01b03169063b82916cb906108a5908590600401610e14565b6020604051808303816000875af11580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e89190610f4b565b600089815260016020818152604080842060088101805460ff1916851790556003810154600782018190558251808401909352338352828401908152948e9052918390525181546001600160a01b0319166001600160a01b0390911617815591519101559550610972945050505050565b60405163e481626b60e01b815260040160405180910390fd5b9392505050565b600080734adc67696ba383f43dd60a9e78f2c97fbbfc7cb190506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f79190610f8f565b50505091505060008113610a4d5760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642070726963652066726f6d206f7261636c650000000000000060448201526064016102e3565b6000610a5e826402540be400610d02565b905060006ec097ce7bc90715b34b9f1000000000610a7c8388610d02565b610a869190610d32565b9695505050505050565b600060208284031215610aa257600080fd5b5035919050565b80356001600160a01b0381168114610ac057600080fd5b919050565b600060208284031215610ad757600080fd5b61097282610aa9565b6000815180845260005b81811015610b0657602081850181015186830182015201610aea565b506000602082860101526020601f19601f83011685010191505092915050565b8a516001600160a01b031681526020808c01519082015260006101808b516001600160a01b0316604084015260208c01516060840152806080840152610b6e8184018c610ae0565b60a084019a909a52505060c081019690965260e086019490945291151561010085015215156101208401526101408301521515610160909101529392505050565b60008060408385031215610bc257600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610bfc57600080fd5b610c0584610aa9565b925060208401359150604084013567ffffffffffffffff80821115610c2957600080fd5b818601915086601f830112610c3d57600080fd5b813581811115610c4f57610c4f610bd1565b604051601f8201601f19908116603f01168101908382118183101715610c7757610c77610bd1565b81604052828152896020848701011115610c9057600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600181811c90821680610cc657607f821691505b602082108103610ce657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d1957610d19610cec565b92915050565b81810381811115610d1957610d19610cec565b600082610d4f57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610a8690830184610ae0565b60048110610dbb57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501808196508360051b8101915082860160005b85811015610e07578284038952610df5848351610ae0565b98850198935090840190600101610ddd565b5091979650505050505050565b60808152610e2f60808201835167ffffffffffffffff169052565b60006020830151610e4c60a084018267ffffffffffffffff169052565b50604083015167ffffffffffffffff90811660c084015260608401511660e083015260808301516001600160a01b0381166101008085019190915260a08501519150610120610ea68186018467ffffffffffffffff169052565b60c08601519250610140610ebc81870185610d9d565b60e08701511515610160870152828701516101808701919091529250610ee66101c0860184610dbf565b90860151858203607f19016101a08701529092509050610f068282610ae0565b9150508281036020840152610f1f816000815260200190565b838103604085015260008152905060208101838103606085015260008152905060208101949350505050565b600060208284031215610f5d57600080fd5b815167ffffffffffffffff8116811461097257600080fd5b805169ffffffffffffffffffff81168114610ac057600080fd5b600080600080600060a08688031215610fa757600080fd5b610fb086610f75565b9450602086015193506040860151925060608601519150610fd360808701610f75565b9050929550929590935056fea2646970667358221220141cff354e0da51964ba181da18ee09f14e795bf464ca1af3ae02dd0dcd2160664736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80635cffa76f116100645780635cffa76f1461019f5780635fc3d52d146101bf578063708d8372146101d25780639fc17088146101f2578063a8c5dc3314610212578063ee95feaf1461024a57600080fd5b806301e9502a146100a1578063075b1a09146100c35780631a2f7167146101095780631e6c598e146101495780632c927c7d1461017f575b600080fd5b3480156100ad57600080fd5b506100c16100bc366004610a90565b61027a565b005b3480156100cf57600080fd5b506000546100eb90600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b34801561011557600080fd5b50610139610124366004610ac5565b60026020526000908152604090205460ff1681565b6040519015158152602001610100565b34801561015557600080fd5b50610169610164366004610a90565b61032d565b6040516101009a99989796959493929190610b26565b34801561018b57600080fd5b506100c161019a366004610baf565b610445565b3480156101ab57600080fd5b506100c16101ba366004610baf565b6104e9565b6100c16101cd366004610a90565b61056d565b3480156101de57600080fd5b506100c16101ed366004610baf565b610641565b3480156101fe57600080fd5b506100eb61020d366004610be7565b6106f7565b34801561021e57600080fd5b50600054610232906001600160a01b031681565b6040516001600160a01b039091168152602001610100565b34801561025657600080fd5b50610139610265366004610ac5565b60036020526000908152604090205460ff1681565b6000818152600160205260409020600a015460ff166102ec5760405162461bcd60e51b815260206004820152602360248201527f73656c6c6572206469646e7420656e74657265642f696e76616c6964206f75746044820152621c1d5d60ea1b60648201526084015b60405180910390fd5b600081815260016020526040808220600901549051339282156108fc02929190818181858888f19350505050158015610329573d6000803e3d6000fd5b5050565b6001602081815260009283526040928390208351808501855281546001600160a01b039081168252938201548184015284518086019095526002820154909316845260038101549184019190915260048101805492939261038d90610cb2565b80601f01602080910402602001604051908101604052809291908181526020018280546103b990610cb2565b80156104065780601f106103db57610100808354040283529160200191610406565b820191906000526020600020905b8154815290600101906020018083116103e957829003601f168201915b50505060058401546006850154600786015460088701546009880154600a909801549697939692955090935060ff80821693610100909204811692168a565b60008281526001602052604081206007015461046090610979565b8210156104c75760405162461bcd60e51b815260206004820152602f60248201527f416d6f756e74206d757374206265206d6f7265207468616e206f72206571756160448201526e1b081d1bc812539488105b5bdd5b9d608a1b60648201526084016102e3565b50506000908152600160205260409020600801805461ff001916610100179055565b60408051808201825233808252602080830185815260008781526001835285902093516002850180546001600160a01b0319166001600160a01b0390921691909117905551600390930192909255915183815284917f79cb74369f9a8fb0e988943a7da5ff39f09c312f56d1c5e03f2eb03deddd51bc910160405180910390a35050565b6000818152600160205260408120600701549061058b826002610d02565b905080341461061d5760405162461bcd60e51b815260206004820152605260248201527f496e636f72726563742045544820616d6f756e742073656e742062792073656c60448201527f6c657220696e746f20636f6e74726163742c206d75737420626520646f75626c6064820152710ca40e8d0ca40e4cae2ead2e4cac8408aa8960731b608482015260a4016102e3565b6106278282610d1f565b600093845260016020526040909320600601929092555050565b60008281526001602052604081206007015461065f90600290610d32565b9050600081116106bd5760405162461bcd60e51b815260206004820152602360248201527f5b4572726f725d3a204e6f2073756666696369656e742045544820746f20636c60448201526261696d60e81b60648201526084016102e3565b604051339082156108fc029083906000818181858888f193505050501580156106ea573d6000803e3d6000fd5b5050506000526001602052565b60008281526001602052604081206002015433906001600160a01b038087169116036109595760408051600280825260608201909252600091816020015b606081526020019060019003908161073557905050604080516001600160a01b0389166020820152919250016040516020818303038152906040528160008151811061078357610783610d54565b6020026020010181905250816040516020016107ae91906001600160a01b0391909116815260200190565b604051602081830303815290604052816001815181106107d0576107d0610d54565b60200260200101819052506000868360016000898152602001908152602001600020600201600101548760405160200161080d9493929190610d6a565b60408051601f19818403018152610140830182526000805467ffffffffffffffff600160a01b8204168552602085018290528484018290526060850182905230608086015260a0850182905260c0850182905260e0850182905261010085018790526101208501839052925163b82916cb60e01b8152919450916001600160a01b03169063b82916cb906108a5908590600401610e14565b6020604051808303816000875af11580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e89190610f4b565b600089815260016020818152604080842060088101805460ff1916851790556003810154600782018190558251808401909352338352828401908152948e9052918390525181546001600160a01b0319166001600160a01b0390911617815591519101559550610972945050505050565b60405163e481626b60e01b815260040160405180910390fd5b9392505050565b600080734adc67696ba383f43dd60a9e78f2c97fbbfc7cb190506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f79190610f8f565b50505091505060008113610a4d5760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642070726963652066726f6d206f7261636c650000000000000060448201526064016102e3565b6000610a5e826402540be400610d02565b905060006ec097ce7bc90715b34b9f1000000000610a7c8388610d02565b610a869190610d32565b9695505050505050565b600060208284031215610aa257600080fd5b5035919050565b80356001600160a01b0381168114610ac057600080fd5b919050565b600060208284031215610ad757600080fd5b61097282610aa9565b6000815180845260005b81811015610b0657602081850181015186830182015201610aea565b506000602082860101526020601f19601f83011685010191505092915050565b8a516001600160a01b031681526020808c01519082015260006101808b516001600160a01b0316604084015260208c01516060840152806080840152610b6e8184018c610ae0565b60a084019a909a52505060c081019690965260e086019490945291151561010085015215156101208401526101408301521515610160909101529392505050565b60008060408385031215610bc257600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610bfc57600080fd5b610c0584610aa9565b925060208401359150604084013567ffffffffffffffff80821115610c2957600080fd5b818601915086601f830112610c3d57600080fd5b813581811115610c4f57610c4f610bd1565b604051601f8201601f19908116603f01168101908382118183101715610c7757610c77610bd1565b81604052828152896020848701011115610c9057600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600181811c90821680610cc657607f821691505b602082108103610ce657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d1957610d19610cec565b92915050565b81810381811115610d1957610d19610cec565b600082610d4f57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610a8690830184610ae0565b60048110610dbb57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501808196508360051b8101915082860160005b85811015610e07578284038952610df5848351610ae0565b98850198935090840190600101610ddd565b5091979650505050505050565b60808152610e2f60808201835167ffffffffffffffff169052565b60006020830151610e4c60a084018267ffffffffffffffff169052565b50604083015167ffffffffffffffff90811660c084015260608401511660e083015260808301516001600160a01b0381166101008085019190915260a08501519150610120610ea68186018467ffffffffffffffff169052565b60c08601519250610140610ebc81870185610d9d565b60e08701511515610160870152828701516101808701919091529250610ee66101c0860184610dbf565b90860151858203607f19016101a08701529092509050610f068282610ae0565b9150508281036020840152610f1f816000815260200190565b838103604085015260008152905060208101838103606085015260008152905060208101949350505050565b600060208284031215610f5d57600080fd5b815167ffffffffffffffff8116811461097257600080fd5b805169ffffffffffffffffffff81168114610ac057600080fd5b600080600080600060a08688031215610fa757600080fd5b610fb086610f75565b9450602086015193506040860151925060608601519150610fd360808701610f75565b9050929550929590935056fea2646970667358221220141cff354e0da51964ba181da18ee09f14e795bf464ca1af3ae02dd0dcd2160664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 993,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "spInstance",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISP)541"
      },
      {
        "astId": 996,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "schemaId",
        "offset": 20,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 1001,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "trades",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Trade)987_storage)"
      },
      {
        "astId": 1005,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "isMerchant",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1009,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "isSeller",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1013,
        "contract": "contracts/offRampBased.sol:offRampBased",
        "label": "requestIdToTradeId",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISP)541": {
        "encoding": "inplace",
        "label": "contract ISP",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Trade)987_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct offRampBased.Trade)",
        "numberOfBytes": "32",
        "value": "t_struct(Trade)987_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Merchant)964_storage": {
        "encoding": "inplace",
        "label": "struct offRampBased.Merchant",
        "members": [
          {
            "astId": 961,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 963,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "cryptoLock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Trade)987_storage": {
        "encoding": "inplace",
        "label": "struct offRampBased.Trade",
        "members": [
          {
            "astId": 967,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "buyer",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Merchant)964_storage"
          },
          {
            "astId": 970,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Merchant)964_storage"
          },
          {
            "astId": 972,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "Trx_Money",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 974,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "InrAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 976,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "extraEth",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 978,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "EthLock",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 980,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "agreed",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 982,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "Paid",
            "offset": 1,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 984,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "remaningEth",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 986,
            "contract": "contracts/offRampBased.sol:offRampBased",
            "label": "dealDone",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}