{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\tfunction decimals() external view returns (uint8);\n\n\tfunction description() external view returns (string memory);\n\n\tfunction version() external view returns (uint256);\n\n\tfunction getRoundData(\n\t\tuint80 _roundId\n\t)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint80 roundId,\n\t\t\tint256 answer,\n\t\t\tuint256 startedAt,\n\t\t\tuint256 updatedAt,\n\t\t\tuint80 answeredInRound\n\t\t);\n\n\tfunction latestRoundData()\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint80 roundId,\n\t\t\tint256 answer,\n\t\t\tuint256 startedAt,\n\t\t\tuint256 updatedAt,\n\t\t\tuint80 answeredInRound\n\t\t);\n}\n"
    },
    "@ethsign/sign-protocol-evm/src/interfaces/ISP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IVersionable } from \"./IVersionable.sol\";\nimport { Schema } from \"../models/Schema.sol\";\nimport { Attestation, OffchainAttestation } from \"../models/Attestation.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Sign Protocol Interface\n * @author Jack Xu @ EthSign\n */\ninterface ISP is IVersionable {\n    event SchemaRegistered(uint64 schemaId);\n    event AttestationMade(uint64 attestationId, string indexingKey);\n    event AttestationRevoked(uint64 attestationId, string reason);\n    event OffchainAttestationMade(string attestationId);\n    event OffchainAttestationRevoked(string attestationId, string reason);\n\n    /**\n     * @dev 0x9e87fac8\n     */\n    error Paused();\n    /**\n     * @dev 0x38f8c6c4\n     */\n    error SchemaNonexistent();\n    /**\n     * @dev 0x71984561\n     */\n    error SchemaWrongRegistrant();\n    /**\n     * @dev 0x8ac42f49\n     */\n    error AttestationIrrevocable();\n    /**\n     * @dev 0x54681a13\n     */\n    error AttestationNonexistent();\n    /**\n     * @dev 0xa65e02ed\n     */\n    error AttestationInvalidDuration();\n    /**\n     * @dev 0xd8c3da86\n     */\n    error AttestationAlreadyRevoked();\n    /**\n     * @dev 0xa9ad2007\n     */\n    error AttestationWrongAttester();\n    /**\n     * @dev 0xc83e3cdf\n     */\n    error OffchainAttestationExists();\n    /**\n     * @dev 0xa006519a\n     */\n    error OffchainAttestationNonexistent();\n    /**\n     * @dev 0xa0671d20\n     */\n    error OffchainAttestationAlreadyRevoked();\n    /**\n     * @dev 0xfdf4e6f9\n     */\n    error InvalidDelegateSignature();\n    /**\n     * @dev 0x5c34b9cc\n     */\n    error LegacySPRequired();\n\n    /**\n     * @notice Registers a Schema.\n     * @dev Emits `SchemaRegistered`.\n     * @param schema See `Schema`.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n     * otherwise.\n     * @return schemaId The assigned ID of the registered schema.\n     */\n    function register(Schema memory schema, bytes calldata delegateSignature) external returns (uint64 schemaId);\n\n    /**\n     * @notice Makes an attestation.\n     * @dev Emits `AttestationMade`.\n     * @param attestation See `Attestation`.\n     * @param indexingKey Used by the frontend to aid indexing.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n     * otherwise.\n     * @param extraData This is forwarded to the resolver directly.\n     * @return attestationId The assigned ID of the attestation.\n     */\n    function attest(\n        Attestation calldata attestation,\n        string calldata indexingKey,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        returns (uint64 attestationId);\n\n    /**\n     * @notice Makes an attestation where the schema hook expects ETH payment.\n     * @dev Emits `AttestationMade`.\n     * @param attestation See `Attestation`.\n     * @param resolverFeesETH Amount of funds to send to the hook.\n     * @param indexingKey Used by the frontend to aid indexing.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n     * otherwise.\n     * @param extraData This is forwarded to the resolver directly.\n     * @return attestationId The assigned ID of the attestation.\n     */\n    function attest(\n        Attestation calldata attestation,\n        uint256 resolverFeesETH,\n        string calldata indexingKey,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        payable\n        returns (uint64 attestationId);\n\n    /**\n     * @notice Makes an attestation where the schema hook expects ERC20 payment.\n     * @dev Emits `AttestationMade`.\n     * @param attestation See `Attestation`.\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\n     * @param indexingKey Used by the frontend to aid indexing.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n     * otherwise.\n     * @param extraData This is forwarded to the resolver directly.\n     * @return attestationId The assigned ID of the attestation.\n     */\n    function attest(\n        Attestation calldata attestation,\n        IERC20 resolverFeesERC20Token,\n        uint256 resolverFeesERC20Amount,\n        string calldata indexingKey,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        returns (uint64 attestationId);\n\n    /**\n     * @notice Timestamps an off-chain data ID.\n     * @dev Emits `OffchainAttestationMade`.\n     * @param offchainAttestationId The off-chain data ID.\n     * @param delegateAttester An optional delegated attester that authorized the caller to attest on their behalf if\n     * this is a delegated attestation. Use `address(0)` otherwise.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\"\"` or `0x`\n     * otherwise. Use `\"\"` or `0x` otherwise.\n     */\n    function attestOffchain(\n        string calldata offchainAttestationId,\n        address delegateAttester,\n        bytes calldata delegateSignature\n    )\n        external;\n\n    /**\n     * @notice Revokes an existing revocable attestation.\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\n     * @param attestationId An existing attestation ID.\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\n     * @param extraData This is forwarded to the resolver directly.\n     */\n    function revoke(\n        uint64 attestationId,\n        string calldata reason,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external;\n\n    /**\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\n     * @param attestationId An existing attestation ID.\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\n     * @param resolverFeesETH Amount of funds to send to the hook.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\n     * @param extraData This is forwarded to the resolver directly.\n     */\n    function revoke(\n        uint64 attestationId,\n        string calldata reason,\n        uint256 resolverFeesETH,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        payable;\n\n    /**\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\n     * @param attestationId An existing attestation ID.\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\n     * @param extraData This is forwarded to the resolver directly.\n     */\n    function revoke(\n        uint64 attestationId,\n        string calldata reason,\n        IERC20 resolverFeesERC20Token,\n        uint256 resolverFeesERC20Amount,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external;\n\n    /**\n     * @notice Revokes an existing offchain attestation.\n     * @dev Emits `OffchainAttestationRevoked`. Must be called by the attester.\n     * @param offchainAttestationId An existing attestation ID.\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\n     */\n    function revokeOffchain(\n        string calldata offchainAttestationId,\n        string calldata reason,\n        bytes calldata delegateSignature\n    )\n        external;\n\n    /**\n     * @notice Batch registers a Schema.\n     */\n    function registerBatch(\n        Schema[] calldata schemas,\n        bytes calldata delegateSignature\n    )\n        external\n        returns (uint64[] calldata schemaIds);\n\n    /**\n     * @notice Batch attests.\n     */\n    function attestBatch(\n        Attestation[] calldata attestations,\n        string[] calldata indexingKeys,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        returns (uint64[] calldata attestationIds);\n\n    /**\n     * @notice Batch attests where the schema hook expects ETH payment.\n     */\n    function attestBatch(\n        Attestation[] calldata attestations,\n        uint256[] calldata resolverFeesETH,\n        string[] calldata indexingKeys,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        payable\n        returns (uint64[] calldata attestationIds);\n\n    /**\n     * @notice Batch attests where the schema hook expects ERC20 payment.\n     */\n    function attestBatch(\n        Attestation[] calldata attestations,\n        IERC20[] calldata resolverFeesERC20Tokens,\n        uint256[] calldata resolverFeesERC20Amount,\n        string[] calldata indexingKeys,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        returns (uint64[] calldata attestationIds);\n\n    /**\n     * @notice Batch timestamps off-chain data IDs.\n     */\n    function attestOffchainBatch(\n        string[] calldata offchainAttestationIds,\n        address delegateAttester,\n        bytes calldata delegateSignature\n    )\n        external;\n\n    /**\n     * @notice Batch revokes revocable on-chain attestations.\n     */\n    function revokeBatch(\n        uint64[] calldata attestationIds,\n        string[] calldata reasons,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external;\n\n    /**\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ETH payment.\n     */\n    function revokeBatch(\n        uint64[] calldata attestationIds,\n        string[] calldata reasons,\n        uint256[] calldata resolverFeesETH,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external\n        payable;\n\n    /**\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment.\n     */\n    function revokeBatch(\n        uint64[] calldata attestationIds,\n        string[] calldata reasons,\n        IERC20[] calldata resolverFeesERC20Tokens,\n        uint256[] calldata resolverFeesERC20Amount,\n        bytes calldata delegateSignature,\n        bytes calldata extraData\n    )\n        external;\n\n    /**\n     * @notice Batch revokes off-chain attestations.\n     */\n    function revokeOffchainBatch(\n        string[] calldata offchainAttestationIds,\n        string[] calldata reasons,\n        bytes calldata delegateSignature\n    )\n        external;\n\n    /**\n     * @notice Returns the specified `Schema`.\n     */\n    function getSchema(uint64 schemaId) external view returns (Schema calldata);\n\n    /**\n     * @notice Returns the specified `Attestation`.\n     */\n    function getAttestation(uint64 attestationId) external view returns (Attestation calldata);\n\n    /**\n     * @notice Returns the specified `OffchainAttestation`.\n     */\n    function getOffchainAttestation(string calldata offchainAttestationId)\n        external\n        view\n        returns (OffchainAttestation calldata);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated registration.\n     */\n    function getDelegatedRegisterHash(Schema memory schema) external pure returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated batch registration.\n     */\n    function getDelegatedRegisterBatchHash(Schema[] memory schemas) external pure returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated attestation.\n     */\n    function getDelegatedAttestHash(Attestation calldata attestation) external pure returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated batch attestation.\n     */\n    function getDelegatedAttestBatchHash(Attestation[] calldata attestations) external pure returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated offchain attestation.\n     */\n    function getDelegatedOffchainAttestHash(string calldata offchainAttestationId) external pure returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain attestation.\n     */\n    function getDelegatedOffchainAttestBatchHash(string[] calldata offchainAttestationIds)\n        external\n        pure\n        returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated revocation.\n     */\n    function getDelegatedRevokeHash(uint64 attestationId, string memory reason) external pure returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated batch revocation.\n     */\n    function getDelegatedRevokeBatchHash(\n        uint64[] memory attestationIds,\n        string[] memory reasons\n    )\n        external\n        pure\n        returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated offchain revocation.\n     */\n    function getDelegatedOffchainRevokeHash(\n        string memory offchainAttestationId,\n        string memory reason\n    )\n        external\n        pure\n        returns (bytes32);\n\n    /**\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain revocation.\n     */\n    function getDelegatedOffchainRevokeBatchHash(\n        string[] memory offchainAttestationIds,\n        string[] memory reasons\n    )\n        external\n        pure\n        returns (bytes32);\n\n    /**\n     * @notice Returns the current schema counter. This is incremented for each `Schema` registered.\n     */\n    function schemaCounter() external view returns (uint64);\n\n    /**\n     * @notice Returns the current on-chain attestation counter. This is incremented for each `Attestation` made.\n     */\n    function attestationCounter() external view returns (uint64);\n}\n"
    },
    "@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title SIGN Attestation Protocol Resolver Interface\n * @author Jack Xu @ EthSign\n */\ninterface ISPHook {\n    function didReceiveAttestation(\n        address attester,\n        uint64 schemaId,\n        uint64 attestationId,\n        bytes calldata extraData\n    )\n        external\n        payable;\n\n    function didReceiveAttestation(\n        address attester,\n        uint64 schemaId,\n        uint64 attestationId,\n        IERC20 resolverFeeERC20Token,\n        uint256 resolverFeeERC20Amount,\n        bytes calldata extraData\n    )\n        external;\n\n    function didReceiveRevocation(\n        address attester,\n        uint64 schemaId,\n        uint64 attestationId,\n        bytes calldata extraData\n    )\n        external\n        payable;\n\n    function didReceiveRevocation(\n        address attester,\n        uint64 schemaId,\n        uint64 attestationId,\n        IERC20 resolverFeeERC20Token,\n        uint256 resolverFeeERC20Amount,\n        bytes calldata extraData\n    )\n        external;\n}\n"
    },
    "@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IVersionable\n * @author Jack Xu @ EthSign\n * @dev This interface helps contracts to keep track of their versioning for upgrade compatibility checks.\n */\ninterface IVersionable {\n    function version() external pure returns (string memory);\n}\n"
    },
    "@ethsign/sign-protocol-evm/src/models/Attestation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { DataLocation } from \"./DataLocation.sol\";\n\n/**\n * @title Attestation\n * @author Jack Xu @ EthSign\n * @notice This struct represents an on-chain attestation record. This record is not deleted after revocation.\n *\n * `schemaId`: The `Schema` that this Attestation is based on. It must exist.\n * `linkedAttestationId`: Useful if the current Attestation references a previous Attestation. It can either be 0 or an\n * existing attestation ID.\n * `attestTimestamp`: When the attestation was made. This is automatically populated by `_attest(...)`.\n * `revokeTimestamp`: When the attestation was revoked. This is automatically populated by `_revoke(...)`.\n * `attester`: The attester. At this time, the attester must be the caller of `attest()`.\n * `validUntil`: The expiration timestamp of the Attestation. Must respect `Schema.maxValidFor`. 0 indicates no\n * expiration date.\n * `dataLocation`: Where `Attestation.data` is stored. See `DataLocation.DataLocation`.\n * `revoked`: If the Attestation has been revoked. It is possible to make a revoked Attestation.\n * `recipients`: The intended ABI-encoded recipients of this Attestation. This is of type `bytes` to support non-EVM\n * repicients.\n * `data`: The raw data of the Attestation based on `Schema.schema`. There is no enforcement here, however. Recommended\n * to use `abi.encode`.\n */\nstruct Attestation {\n    uint64 schemaId;\n    uint64 linkedAttestationId;\n    uint64 attestTimestamp;\n    uint64 revokeTimestamp;\n    address attester;\n    uint64 validUntil;\n    DataLocation dataLocation;\n    bool revoked;\n    bytes[] recipients;\n    bytes data;\n}\n\n/**\n * @title OffchainAttestation\n * @author Jack Xu @ EthSign\n * @notice This struct represents an off-chain attestation record. This record is not deleted after revocation.\n *\n * `attester`: The attester. At this time, the attester must be the caller of `attestOffchain()`.\n * `timestamp`: The `block.timestamp` of the function call.\n */\nstruct OffchainAttestation {\n    address attester;\n    uint64 timestamp;\n}\n"
    },
    "@ethsign/sign-protocol-evm/src/models/DataLocation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title DataLocation\n * @author Jack Xu @ EthSign\n * @notice This enum indicates where `Schema.data` and `Attestation.data` are stored.\n */\nenum DataLocation {\n    ONCHAIN,\n    ARWEAVE,\n    IPFS,\n    CUSTOM\n}\n"
    },
    "@ethsign/sign-protocol-evm/src/models/Schema.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ISPHook } from \"../interfaces/ISPHook.sol\";\nimport { DataLocation } from \"./DataLocation.sol\";\n\n/**\n * @title Schema\n * @author Jack Xu @ EthSign\n * @notice This struct represents an on-chain Schema that Attestations can conform to.\n *\n * `registrant`: The address that registered this schema.\n * `revocable`: Whether Attestations that adopt this Schema can be revoked.\n * `dataLocation`: Where `Schema.data` is stored. See `DataLocation.DataLocation`.\n * `maxValidFor`: The maximum number of seconds that an Attestation can remain valid. 0 means Attestations can be valid\n * forever. This is enforced through `Attestation.validUntil`.\n * `hook`: The `ISPHook` that is called at the end of every function. 0 means there is no hook set. See\n * `ISPHook`.\n * `timestamp`: When the schema was registered. This is automatically populated by `_register(...)`.\n * `data`: The raw schema that `Attestation.data` should follow. Since there is no way to enforce this, it is a `string`\n * for easy readability.\n */\nstruct Schema {\n    address registrant;\n    bool revocable;\n    DataLocation dataLocation;\n    uint64 maxValidFor;\n    ISPHook hook;\n    uint64 timestamp;\n    string data;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/offRampBased.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\nimport { AggregatorV3Interface } from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ISP } from \"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\";\nimport { Attestation } from \"@ethsign/sign-protocol-evm/src/models/Attestation.sol\";\nimport { DataLocation } from \"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\";\n\ncontract offRampBased {\n\taddress private constant priceFeedAddress =\n\t\t0x4aDC67696bA383F43DD60A9e78F2C97Fbbfc7cb1;\n\terror ConfirmationAddressMismatch();\n\n\tevent EthClaimed(\n\t\taddress indexed seller,\n\t\taddress indexed buyer,\n\t\tuint256 tradeId,\n\t\tuint256 amountClaimed\n\t);\n\n\tstruct Merchant {\n\t\taddress addr;\n\t\tuint256 cryptoLock;\n\t}\n\tstruct Trade {\n\t\tMerchant buyer;\n\t\tMerchant seller;\n\t\tstring Trx_Money;\n\t\tuint256 InrAmount;\n\t\tuint256 extraEth;\n\t\tuint256 EthLock;\n\t\tbool agreed;\n\t\tbool Paid;\n\t\tuint256 remaningEth;\n\t\tbool dealDone;\n\t}\n\tISP public spInstance = ISP(0x4e4af2a21ebf62850fD99Eb6253E1eFBb56098cD);\n\tuint64 public schemaId = 244;\n\tmapping(uint256 => Trade) public trades;\n\tmapping(address => bool) public isMerchant;\n\tmapping(address => bool) public isSeller;\n\tmapping(bytes32 => uint256) private requestIdToTradeId;\n\n\tconstructor() {}\n\n\tfunction addressToUint256(address _addr) private pure returns (uint256) {\n\t\treturn uint256(uint160(_addr));\n\t}\n\n\tfunction confirmOffRamp(\n\t\taddress sellerAddress,\n\t\tuint256 tradeId,\n\t\tbytes memory _data\n\t) external returns (uint64) {\n\t\taddress partyB = msg.sender;\n\t\tif (trades[tradeId].seller.addr == sellerAddress) {\n\t\t\tbytes[] memory recipients = new bytes[](2);\n\t\t\trecipients[0] = abi.encode(sellerAddress);\n\t\t\trecipients[1] = abi.encode(partyB);\n\t\t\tbytes memory data = abi.encode(\n\t\t\t\tsellerAddress,\n\t\t\t\tpartyB,\n\t\t\t\ttrades[tradeId].seller.cryptoLock,\n\t\t\t\t_data\n\t\t\t);\n\t\t\tAttestation memory a = Attestation({\n\t\t\t\tschemaId: schemaId,\n\t\t\t\tlinkedAttestationId: 0,\n\t\t\t\tattestTimestamp: 0,\n\t\t\t\trevokeTimestamp: 0,\n\t\t\t\tattester: address(this),\n\t\t\t\tvalidUntil: 0,\n\t\t\t\tdataLocation: DataLocation.ONCHAIN,\n\t\t\t\trevoked: false,\n\t\t\t\trecipients: recipients,\n\t\t\t\tdata: data\n\t\t\t});\n\t\t\tuint64 attestationId = spInstance.attest(a, \"\", \"\", \"\");\n\t\t\ttrades[tradeId].agreed = true;\n\t\t\ttrades[tradeId].EthLock = trades[tradeId].seller.cryptoLock;\n\t\t\ttrades[tradeId].buyer = Merchant(\n\t\t\t\tmsg.sender,\n\t\t\t\ttrades[tradeId].EthLock\n\t\t\t);\n\t\t\treturn attestationId; //for this attestationid -> both parties match modifier\n\t\t} else {\n\t\t\trevert ConfirmationAddressMismatch();\n\t\t}\n\t}\n\n\tfunction sendVerifyByBuyer(uint256 tradeId, uint256 amountPaid) public {\n\t\t//proof from the buyer with rupees\n\t\t//here buyer sends payment through phonepe and make zk proof->\n\t\t//require() statement needed\n\t\tuint256 rupeee;\n\t\trequire(\n\t\t\tamountPaid >= getPrice(trades[tradeId].EthLock),\n\t\t\t\"Amount must be more than or equal to INR Amount\"\n\t\t);\n\t\ttrades[tradeId].Paid = true;\n\t}\n\n\t//enter tnxid by the seller and take your half of amount money -:)and you got your money in your bank+remaming eth(x2) in your wallet\n\t//the original-x amount went to buyer\n\tfunction confirmBySeller(uint256 tradeId, bytes32 txnId) external {\n\t\t//enter private tnxID and check , verify from the buyer rom signals array bit\n\t\t//if yes then\n\t\tuint256 halfEth = trades[tradeId].EthLock / 2;\n\t\trequire(halfEth > 0, \"[Error]: No sufficient ETH to claim\");\n\t\tpayable(msg.sender).transfer(halfEth);\n\t\ttrades[tradeId].dealDone == true;\n\t}\n\n\tfunction ClaimByBuyer(uint256 tradeId) external {\n\t\trequire(\n\t\t\ttrades[tradeId].dealDone,\n\t\t\t\"seller didnt entered/invalid output\"\n\t\t);\n\t\tpayable(msg.sender).transfer(trades[tradeId].remaningEth);\n\t}\n\n\tmodifier OnlySeller(uint256 tradeId) {\n\t\trequire(\n\t\t\ttrades[tradeId].seller.addr == msg.sender,\n\t\t\t\"you are not the authorized seller to claim\"\n\t\t);\n\t\t_;\n\t}\n\tfunction getPrice(uint256 LockETH) internal view returns (uint256) {\n\t\tAggregatorV3Interface priceFeed = AggregatorV3Interface(\n\t\t\tpriceFeedAddress\n\t\t);\n\t\t(, int256 price, , , ) = priceFeed.latestRoundData();\n\t\trequire(price > 0, \"Invalid price from oracle\");\n\t\tuint256 ethPriceInUsd = uint256(price) * 1e10; // Adjust price for precision\n\t\tuint256 usdValue = (LockETH * ethPriceInUsd) / 1e36; // Convert ETH to USD\n\t\treturn usdValue;\n\t}\n\n\tmodifier onlyBuyer(uint256 tradeId) {\n\t\trequire(\n\t\t\ttrades[tradeId].buyer.addr == msg.sender,\n\t\t\t\"you are not the authorized seller to claim\"\n\t\t);\n\t\t_;\n\t}\n\tevent DoubleDeposit(\n\t\tuint256 indexed tradeId,\n\t\taddress indexed seller,\n\t\tuint256 tradeETH\n\t);\n\n\tfunction doubleDeposit(uint256 tradeId, uint256 tradeETH) external {\n\t\ttrades[tradeId].seller = Merchant(msg.sender, tradeETH);\n\t\temit DoubleDeposit(tradeId, msg.sender, tradeETH);\n\t}\n\n\tfunction startRound(uint256 tradeId) external payable {\n\t\tuint256 requiredETH = trades[tradeId].EthLock;\n\t\tuint256 doubledETH = requiredETH * 2;\n\t\t// Ensure the seller pays double the required ETH amount later can withdraw other half of it :-)\n\t\trequire(\n\t\t\tmsg.value == doubledETH,\n\t\t\t\"Incorrect ETH amount sent by seller into contract, must be double the required ETH\"\n\t\t);\n\t\ttrades[tradeId].extraEth = doubledETH - requiredETH;\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}